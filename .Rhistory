Kline.slice = 'goldenrod3'
#cexaxis = 2
cexpt = 2
cexlab = 3
cexaxis = 2.25
cexlegend = 2.5
cexabc = 2.5
cexmain = 2.5
#Empirical data
#Sebastes phylogeny has 99 species (only 66 in NEP), so pull out clades for each scenario of roughly the same size
rich=66
Ttrop99 = subset(Ttrop, clade.richness > .9*rich & clade.richness < 1.1*rich)
Ktrop99 = subset(Ktrop, clade.richness > .9*rich & clade.richness < 1.1*rich)
Ktrop.slice99 = subset(Ktrop.slice, clade.richness > .9*rich & clade.richness < 1.1*rich)
Ktemp99 = subset(Ktemp, clade.richness > .9*rich & clade.richness < 1.1*rich)
Ktemp.slice99 = subset(Ktemp.slice, clade.richness > .9*rich & clade.richness < 1.1*rich)
par(new=T)
par(fig = c(0, 1, 0, 0.33))
plot(density(Ttrop99$gamma.stat), col=Tcol, main="", xlab="Gamma", lwd=5, las=1,
xlim = c(-8,2), cex.lab = cexlab, cex.axis = cexaxis)
points(density(Ktrop99$gamma.stat), type='l',col=Kcol, lty='dashed',lwd=5)
points(density(Ktemp99$gamma.stat), type='l',col=Kcol, lwd=5)
points(density(Ktrop.slice99$gamma.stat), type= 'l', col=Kcol.slice, lty='dashed', lwd=5)
points(density(Ktemp.slice99$gamma.stat), type = 'l', col=Kcol.slice, lwd=5)
abline(v = gammaStat(NEPphy), lwd=3)
legend("topleft",c('tropical', 'temperate'),
col = 'gray50', lty = c('dashed', 'solid'), lwd=4, bty = "n", cex = cexlegend)
mtext("(c)", 2, at = 0.33, cex = cexabc, outer = T, las = 1, line = .5)
plot(density(Ttrop99$gamma.stat), col=Tcol, main="", xlab="Gamma", lwd=5, las=1,
xlim = c(-8,2), cex.lab = cexlab, cex.axis = cexaxis)
dev.off()
plot(density(Ttrop99$gamma.stat), col=Tcol, main="", xlab="Gamma", lwd=5, las=1,
xlim = c(-8,2), cex.lab = cexlab, cex.axis = cexaxis)
points(density(Ktrop99$gamma.stat), type='l',col=Kcol, lty='dashed',lwd=5)
points(density(Ktemp99$gamma.stat), type='l',col=Kcol, lwd=5)
points(density(Ktrop.slice99$gamma.stat), type= 'l', col=Kcol.slice, lty='dashed', lwd=5)
points(density(Ktemp.slice99$gamma.stat), type = 'l', col=Kcol.slice, lwd=5)
abline(v = gammaStat(NEPphy), lwd=3)
legend("topleft",c('tropical', 'temperate'),
col = 'gray50', lty = c('dashed', 'solid'), lwd=4, bty = "n", cex = cexlegend)
mtext("(c)", 2, at = 0.33, cex = cexabc, outer = T, las = 1, line = .5)
pdf(paste(analysis_dir,'/summaryplots/Pauling_gamma_sim_and_empirical_',Sys.Date(),'.pdf',sep='')); par(pty='s');
plot(density(Ttrop99$gamma.stat), col=Tcol, main="", xlab="Gamma", lwd=5, las=1,
xlim = c(-8,2), cex.lab = cexlab, cex.axis = cexaxis)
points(density(Ktrop99$gamma.stat), type='l',col=Kcol, lty='dashed',lwd=5)
points(density(Ktemp99$gamma.stat), type='l',col=Kcol, lwd=5)
points(density(Ktrop.slice99$gamma.stat), type= 'l', col=Kcol.slice, lty='dashed', lwd=5)
points(density(Ktemp.slice99$gamma.stat), type = 'l', col=Kcol.slice, lwd=5)
abline(v = gammaStat(NEPphy), lwd=3)
legend("topleft",c('tropical', 'temperate'),
col = 'gray50', lty = c('dashed', 'solid'), lwd=4, bty = "n", cex = cexlegend)
mtext("(c)", 2, at = 0.33, cex = cexabc, outer = T, las = 1, line = .5)
dev.off()
# Plot boxplots of gamma (phylogenetic tree shape statistic) across 3 scenarios
# (K gradient, disturbance gradient, or no limit) and 2 regions of origin.
Allen = 0;
if (Allen ==1) {
sim_dir = "C:/SENCoutput/senc_reps_analysis"
analysis_dir = "//bioark.bio.unc.edu/hurlbertallen/manuscripts/cladevscommunity/analyses"
repo_dir = "C:/Documents and Settings/Hurlbert/species-energy-simulation"
}
if (Allen == 0) {
sim_dir = "C:/Users/steg815/Desktop/Stegen_PNNL/Spp-Energy-Niche-Conserv/sims.out.130204"
analysis_dir = "C:/Users/steg815/Desktop/Stegen_PNNL/Spp-Energy-Niche-Conserv/sims.out.130204"
repo_dir = "C:/Users/steg815/Desktop/Stegen_PNNL/Spp-Energy-Niche-Conserv/species-energy-simulation"
}
# Sebastes data
# MRD-PSV-Richness analyses
phy = read.tree(paste(repo_dir,'/Sebastes_tree_Ingram2011PRSB.phy',sep=''))
sebastes = read.csv(paste(repo_dir,'/sebastes_data_for_allen.csv',sep=''),header=T)
#Drop non-NEP species (with no latitude data)
nonNEPsp = as.character(sebastes[is.na(sebastes$min_latitude), 'X'])
NEPphy = drop.tip(phy,nonNEPsp)
richness = sapply(lat, function(x) nrow(subset(sebastes, min_latitude <= x & max_latitude >= x)))
phylo.bl1 <- compute.brlen(NEPphy, 1)
all.dist <- dist.nodes(phylo.bl1)
root.dist <- all.dist[length(NEPphy$tip.label)+1, 1:length(NEPphy$tip.label)]
tips.to.root <- data.frame(spp.name=NEPphy$tip.label,root.dist)
output = c()
for (i in lat) {
species = subset(sebastes, min_latitude <= i & max_latitude >= i, select='X')
#MRD
MRD.ini <- merge(species, tips.to.root, by.x="X", by.y="spp.name",sort = FALSE)
MRD <- mean(MRD.ini$root.dist)
#PSV
Vmatrix = vcv(NEPphy, corr=F)
psvs = matrix(NA, ncol=2)
index = row.names(Vmatrix) %in% species$X
v.matrix = Vmatrix[index,index]
n = nrow(v.matrix)
psv = (n*sum(diag(v.matrix)) - sum(v.matrix))/(sum(diag(v.matrix))*(n-1))
output = rbind(output, c(i, MRD, psv))
}
output2 = data.frame(cbind(output, richness))
names(output2) = c('lat','MRD','PSV','S')
# For Energy Gradient temperate origin,
#   MRD-S correlation predicted to be positive
#   PSV-S correlation predicted to be negative
cor(output2)
#restricting analysis to north of Point Conception
output3 = output2[output2$lat >= 34,]
cor(output3)
# Simulation data analysis
which.sims = c(3465:4064); length(which.sims);
#rootclade.stats = compile.firstlines(sim_dir,"SENC_Stats_sim")
simstats = read.csv(paste(analysis_dir,"/rootclade_stats_sims2925-4064.csv",sep=""), header=T);
simstats$timeslice = 'no';
slicestats = read.csv(paste(analysis_dir,"/rootclade_slice_stats_sims3665-3861.csv",sep=""), header=T);
slicestats$timeslice = 'yes';
simstats = rbind(simstats,slicestats);
sim.matrix = read.csv(paste(repo_dir,'/SENC_Master_Simulation_Matrix.csv',sep=""),header=T)
simstats2 = merge(simstats, sim.matrix[,c(1,3:10,15,16)],by.x='sim',by.y='sim.id',all.x=T)
simstats3 = subset(simstats2, sim %in% which.sims)
simstats3$scenario = NA
simstats3$scenario[simstats3$carry.cap=="on" & simstats3$energy.gradient=="on" & simstats3$timeslice=="no"] = "1 energy gradient"
simstats3$scenario[simstats3$carry.cap=="off" & simstats3$energy.gradient=="off" & simstats3$timeslice=="no"] = "2 no zero sum"
simstats3$scenario[simstats3$carry.cap=="on" & simstats3$energy.gradient=="on" & simstats3$timeslice=="yes"] = "3 pre-equilibrium"
simstats3$reg.of.origin = as.character(simstats3$reg.of.origin)
tropical.shade = 'red'
temperate.shade = 'blue'
boxplot.cols = c(rep(temperate.shade,3),rep(tropical.shade,3))
pdf(paste(analysis_dir,'/summaryplots/3scenarios_MRDPSV_',Sys.Date(),'.pdf',sep=''),height=6,width=8)
par(mfrow=c(2,1), mar=c(1,5,1,1), oma=c(5,1,1,1), las=1)
boxplot(simstats3$r.MRD.rich ~ simstats3$scenario + simstats3$reg.of.origin,
ylab=expression(italic(r)[MRD-richness]), xaxt="n",
col = boxplot.cols, border = boxplot.cols, lwd=1,cex.axis=0.8, cex.lab = 1.5)
rect(0, 0, 7, 1.1, col = rgb(.6,.6,.6,.1), border = NA)
abline(h = cor(output2$MRD, output2$S), lwd = 2) #entire gradient
abline(h = cor(output3$MRD, output3$S), lwd = 2, lty = 'dashed') #north of 34N
mtext("(a)", 2, at = 1.2, las = 1, line = 3, cex = 2)
boxplot(simstats3$r.PSV.rich ~ simstats3$scenario + simstats3$reg.of.origin,
ylab=expression(italic(r)[PSV-richness]), xaxt="n",
col = boxplot.cols, border = boxplot.cols,lwd=1,cex.axis=0.8, cex.lab=1.5)
rect(0, 0, 7, 1.1, col = rgb(.5,.5,.5,.1), border = NA)
abline(h = cor(output2$PSV, output2$S), lwd = 2) #entire gradient
abline(h = cor(output3$PSV, output3$S), lwd = 2, lty = 'dashed') #north of 34N
mtext("(b)", 2, at = 1.2, line = 3, las = 1, cex = 2)
axis(1, at = 1:6, labels = F)
mtext(rep(c('Energy','No zero','Pre-'),2), 1, at = 1:6, line = 1)
mtext(rep(c('gradient','sum','equilibrium'),2), 1, at = 1:6, line = 2)
mtext("Temperate Origin", side = 1, adj = 0.3, cex = 1.25, line = 3, outer = T)
mtext("Tropical Origin", side = 1, adj = 0.8, cex = 1.25, line = 3, outer = T)
#legend("bottom",c("Entire gradient","North of 34N"), lty = c('solid','dashed'))
dev.off()
library(ape);
# Sebastes data
# MRD-PSV-Richness analyses
phy = read.tree(paste(repo_dir,'/Sebastes_tree_Ingram2011PRSB.phy',sep=''))
# Plot boxplots of gamma (phylogenetic tree shape statistic) across 3 scenarios
# (K gradient, disturbance gradient, or no limit) and 2 regions of origin.
Allen = 0;
if (Allen ==1) {
sim_dir = "C:/SENCoutput/senc_reps_analysis"
analysis_dir = "//bioark.bio.unc.edu/hurlbertallen/manuscripts/cladevscommunity/analyses"
repo_dir = "C:/Documents and Settings/Hurlbert/species-energy-simulation"
}
if (Allen == 0) {
sim_dir = "C:/Users/steg815/Desktop/Stegen_PNNL/Spp-Energy-Niche-Conserv/sims.out.130204"
analysis_dir = "C:/Users/steg815/Desktop/Stegen_PNNL/Spp-Energy-Niche-Conserv/sims.out.130204"
repo_dir = "C:/Users/steg815/Desktop/Stegen_PNNL/Spp-Energy-Niche-Conserv/species-energy-simulation"
}
library(ape);
# Sebastes data
# MRD-PSV-Richness analyses
phy = read.tree(paste(repo_dir,'/Sebastes_tree_Ingram2011PRSB.phy',sep=''))
sebastes = read.csv(paste(repo_dir,'/sebastes_data_for_allen.csv',sep=''),header=T)
#Drop non-NEP species (with no latitude data)
nonNEPsp = as.character(sebastes[is.na(sebastes$min_latitude), 'X'])
NEPphy = drop.tip(phy,nonNEPsp)
richness = sapply(lat, function(x) nrow(subset(sebastes, min_latitude <= x & max_latitude >= x)))
phylo.bl1 <- compute.brlen(NEPphy, 1)
all.dist <- dist.nodes(phylo.bl1)
root.dist <- all.dist[length(NEPphy$tip.label)+1, 1:length(NEPphy$tip.label)]
tips.to.root <- data.frame(spp.name=NEPphy$tip.label,root.dist)
output = c()
for (i in lat) {
species = subset(sebastes, min_latitude <= i & max_latitude >= i, select='X')
#MRD
MRD.ini <- merge(species, tips.to.root, by.x="X", by.y="spp.name",sort = FALSE)
MRD <- mean(MRD.ini$root.dist)
#PSV
Vmatrix = vcv(NEPphy, corr=F)
psvs = matrix(NA, ncol=2)
index = row.names(Vmatrix) %in% species$X
v.matrix = Vmatrix[index,index]
n = nrow(v.matrix)
psv = (n*sum(diag(v.matrix)) - sum(v.matrix))/(sum(diag(v.matrix))*(n-1))
output = rbind(output, c(i, MRD, psv))
}
output2 = data.frame(cbind(output, richness))
names(output2) = c('lat','MRD','PSV','S')
# For Energy Gradient temperate origin,
#   MRD-S correlation predicted to be positive
#   PSV-S correlation predicted to be negative
cor(output2)
#restricting analysis to north of Point Conception
output3 = output2[output2$lat >= 34,]
cor(output3)
# Simulation data analysis
which.sims = c(3465:4064); length(which.sims);
#rootclade.stats = compile.firstlines(sim_dir,"SENC_Stats_sim")
simstats = read.csv(paste(analysis_dir,"/rootclade_stats_sims2925-4064.csv",sep=""), header=T);
simstats$timeslice = 'no';
slicestats = read.csv(paste(analysis_dir,"/rootclade_slice_stats_sims3665-3861.csv",sep=""), header=T);
slicestats$timeslice = 'yes';
simstats = rbind(simstats,slicestats);
sim.matrix = read.csv(paste(repo_dir,'/SENC_Master_Simulation_Matrix.csv',sep=""),header=T)
simstats2 = merge(simstats, sim.matrix[,c(1,3:10,15,16)],by.x='sim',by.y='sim.id',all.x=T)
simstats3 = subset(simstats2, sim %in% which.sims)
simstats3$scenario = NA
simstats3$scenario[simstats3$carry.cap=="on" & simstats3$energy.gradient=="on" & simstats3$timeslice=="no"] = "1 energy gradient"
simstats3$scenario[simstats3$carry.cap=="off" & simstats3$energy.gradient=="off" & simstats3$timeslice=="no"] = "2 no zero sum"
simstats3$scenario[simstats3$carry.cap=="on" & simstats3$energy.gradient=="on" & simstats3$timeslice=="yes"] = "3 pre-equilibrium"
simstats3$reg.of.origin = as.character(simstats3$reg.of.origin)
tropical.shade = 'red'
temperate.shade = 'blue'
boxplot.cols = c(rep(temperate.shade,3),rep(tropical.shade,3))
pdf(paste(analysis_dir,'/summaryplots/3scenarios_MRDPSV_',Sys.Date(),'.pdf',sep=''),height=6,width=8)
par(mfrow=c(2,1), mar=c(1,5,1,1), oma=c(5,1,1,1), las=1)
boxplot(simstats3$r.MRD.rich ~ simstats3$scenario + simstats3$reg.of.origin,
ylab=expression(italic(r)[MRD-richness]), xaxt="n",
col = boxplot.cols, border = boxplot.cols, lwd=1,cex.axis=0.8, cex.lab = 1.5)
rect(0, 0, 7, 1.1, col = rgb(.6,.6,.6,.1), border = NA)
abline(h = cor(output2$MRD, output2$S), lwd = 2) #entire gradient
abline(h = cor(output3$MRD, output3$S), lwd = 2, lty = 'dashed') #north of 34N
mtext("(a)", 2, at = 1.2, las = 1, line = 3, cex = 2)
boxplot(simstats3$r.PSV.rich ~ simstats3$scenario + simstats3$reg.of.origin,
ylab=expression(italic(r)[PSV-richness]), xaxt="n",
col = boxplot.cols, border = boxplot.cols,lwd=1,cex.axis=0.8, cex.lab=1.5)
rect(0, 0, 7, 1.1, col = rgb(.5,.5,.5,.1), border = NA)
abline(h = cor(output2$PSV, output2$S), lwd = 2) #entire gradient
abline(h = cor(output3$PSV, output3$S), lwd = 2, lty = 'dashed') #north of 34N
mtext("(b)", 2, at = 1.2, line = 3, las = 1, cex = 2)
axis(1, at = 1:6, labels = F)
mtext(rep(c('Energy','No zero','Pre-'),2), 1, at = 1:6, line = 1)
mtext(rep(c('gradient','sum','equilibrium'),2), 1, at = 1:6, line = 2)
mtext("Temperate Origin", side = 1, adj = 0.3, cex = 1.25, line = 3, outer = T)
mtext("Tropical Origin", side = 1, adj = 0.8, cex = 1.25, line = 3, outer = T)
#legend("bottom",c("Entire gradient","North of 34N"), lty = c('solid','dashed'))
dev.off()
head(sebastes)
richness = sapply(lat, function(x) nrow(subset(sebastes, min_latitude <= x & max_latitude >= x)))
richness = sapply(sebastes, function(x) nrow(subset(sebastes, min_latitude <= x & max_latitude >= x)))
7108.65*12
20*0.2
100/10000
0.1/3.14
sqrt(0.03184713)
sqrt(1000)
0.3*10
0.3*33
sim_dir = "C:/Users/steg815/Desktop/Stegen_PNNL/Spp-Energy-Niche-Conserv/sims.out.130204"
Ttemp = read.csv(paste(sim_dir,'/SENC_Stats_T.sims.temp.csv',sep=''), header=T)
Ktemp = read.csv(paste(sim_dir,'/SENC_Stats_K.sims.temp.csv',sep=''), header=T)
Ktemp.slice = read.csv(paste(sim_dir,'/SENC_Stats_K.slice.sims.temp.csv',sep=''), header=T)
head(Ktemp)
unique(Ktemp$sim)
unique(Ktemp.slice$sim)
length(unique(Ktemp.slice$sim))
is.element(unique(Ktemp.slice$sim),unique(Ktemp$sim))
Ktrop = read.csv(paste(sim_dir,'/SENC_Stats_K.sims.trop.csv',sep=''), header=T)
Ktrop.slice = read.csv(paste(sim_dir,'/SENC_Stats_K.slice.sims.trop.csv',sep=''), header=T)
is.element(unique(Ktrop.slice$sim),unique(Ktemp$sim))
is.element(unique(Ktrop.slice$sim),unique(Ktrop$sim))
repo_dir = "C:/Users/steg815/Desktop/Stegen_PNNL/Spp-Energy-Niche-Conserv/species-energy-simulation"
sim.matrix = read.csv(repo_dir/"SENC_Master_Simulation_Matrix.csv"); head(sim.matrix)
sim.matrix = read.csv(paste(repo_dir,"/SENC_Master_Simulation_Matrix.csv",sep="")); head(sim.matrix)
sim.matrix$reg.of.origin[unique(Ktrop.slice$sim) %in% sim.matrix$sim.id]
sim.matrix$reg.of.origin[sim.matrix$sim.id %in% unique(Ktrop.slice$sim)]
sim.matrix$reg.of.origin[sim.matrix$sim.id %in% unique(Ktrop$sim)]
sim.matrix$reg.of.origin[sim.matrix$sim.id %in% unique(Ktemp$sim)]
sim.matrix$reg.of.origin[sim.matrix$sim.id %in% unique(Ktemp.slice$sim)]
sim.matrix$reg.of.origin[sim.matrix$sim.id %in% unique(Ttemp$sim)]
12*11
7500-399
7500-399-1245.16
7500-399-1245.16-5
7916.67*12
7.5/2.54
3.5/2.54
10 / 2.54
1/2.54
197.19 / 1000 * 5
197.19 / 1000 * 5 * 0.05
197.19 / 1000 * 5 * 0.05 * 1000
375 + 0.05
375 + 375*0.05
400 * 50
400 * 30
1300*7/60
1300*7/60/60
0.25*1609
8/40
15*50
15*50/60
10*50/60
152*8
# Choose number of time slices per simulation to analyze
num.of.time.slices = -999; # use -999 if you want to define specific time slices
which.time.slices = -999;
time.sequence = seq(2,300,by = 2);
if (num.of.time.slices == 1) { timeslices = pre.equil.time};
timeslices
if (which.time.slices != -999  ) { timeslices = which.time.slices };
if (num.of.time.slices > 1) {timeslices = as.integer(round(seq(max(time.richness$time)/num.of.time.slices,max(time.richness$time),length=num.of.time.slices),digits=0))};
if (time.sequence != -999) {timeslices = time.sequence};
timeslices
if (time.sequence[1] != -999) {timeslices = time.sequence};
timeslices
foo = read.csv("//constance/people/steg815/senc.analysis/NEW_Stats_sim3565_time_seq_root_only.csv")
head(foo)
plot(foo$r.PSV.rich ~ foo$time)
points(foo$r.PSV.rich[foo$n.div.regions >= 4] ~ foo$time[foo$n.div.regions >= 4],col=2)
plot(foo$r.PSV.rich[foo$n.regions >= 4] ~ foo$time[foo$n.regions >= 4],col=1)
points(foo$r.PSV.rich[foo$n.div.regions >= 4] ~ foo$time[foo$n.div.regions >= 4],col=2)
# Choose number of time slices per simulation to analyze
num.of.time.slices = -999; # use -999 if you want to define specific time slices
which.time.slices = -999;
time.sequence = seq(2,100,by = 2);
# choose root only or all clades
root.only = 1 # 0 means all clades, 1 means just the root
# Set minimum number of species in a clade needed to proceed with analysis
min.num.spp = 8;
Allen = 0;
partial.analysis = 1; # toggle to determine whether we're looking at all sims or just some
#New parameter for taking into account which of us is running this code
if(Allen==1) {
setwd('c:/documents and settings/hurlbert/species-energy-simulation')
Rlib.location = "C:/program files/R/R-2.15.2/library"
sim_dir = "C:/SENCoutput"
analysis_dir = "//bioark.bio.unc.edu/hurlbertallen/manuscripts/cladevscommunity/analyses"
} else {
setwd('C:/Users/steg815/Desktop/Stegen_PNNL/Spp-Energy-Niche-Conserv/species-energy-simulation')
sim_dir = "C:/Users/steg815/Desktop/Stegen_PNNL/Spp-Energy-Niche-Conserv/sims.out.130204" #wherever all of your zipped output files are
analysis_dir = "C:/Users/steg815/Desktop/Stegen_PNNL/Spp-Energy-Niche-Conserv/sims.out.130204" #wherever you want to store the results of these analyses
}
#(2) load simulation and analysis functions
if (Allen==1){
library(ape,lib.loc=Rlib.location);
library(permute,lib.loc=Rlib.location);
library(nlme,lib.loc=Rlib.location);
library(vegan,lib.loc=Rlib.location);
library(picante,lib.loc=Rlib.location);
library(mvtnorm,lib.loc=Rlib.location);
library(caper,lib.loc=Rlib.location);
library(paleotree,lib.loc=Rlib.location);
library(plyr,lib.loc=Rlib.location);
library(phytools, lib.loc=Rlib.location);
library(foreach,lib.loc=Rlib.location);
library(doParallel,lib.loc=Rlib.location);
} else {
library(ape);
library(permute);
library(nlme);
library(vegan);
library(picante);
library(mvtnorm);
library(caper);
library(paleotree);
library(plyr);
library(phytools);
library(foreach);
library(doParallel);
}
source('reg_calc_and_analysis.r');
source('make.phylo.jimmy.fun.r');
source('lat.grad.time.plot.r');
source('clade.origin.corr.plot.r');
source('clade.exmpl.figs.r');
source('extinct.calc.r');
source('unzipping_files.r');
#(3) read in master simulation matrix with chosen parameter combinations;
# then add fields for storing output summary
sim.matrix = as.data.frame(read.csv("SENC_Master_Simulation_Matrix.csv",header=T));
sim.matrix$n.regions = NA
sim.matrix$extant.S = NA
sim.matrix$extinct.S = NA
sim.matrix$skipped.clades = NA
sim.matrix$skipped.times = NA
sim.matrix$BK.reg = NA
sim.matrix$BK.env = NA
#(4) start analyses based on value of 'sim' which draws parameter values from sim.matrix
if (partial.analysis == 0) {which.sims = 1:max(sim.matrix$sim.id)};
#if (partial.analysis == 1) {which.sims = c(sim.matrix$sim.id[sim.matrix$carry.cap == 'on' & sim.matrix$energy.gradient == 'on' & sim.matrix$sim.id > 3464])}; # which.sims = c(read.csv(paste(analysis_dir,"/sims.to.analyze.csv",sep=""))$x)
if (partial.analysis == 1) {which.sims = c(4065)};
which.sims = which.sims;
sim = which.sims
trop.orig.extreme = 3;
temp.orig.extreme = 8;
pre.equil.time = 5459;
output = numeric();
sim.results = output.unzip(sim_dir,sim)
all.populations = sim.results$all.populations
time.richness = sim.results$time.richness
phylo.out = sim.results$phylo.out
params.out = sim.results$params.out
if (sim.matrix$reg.of.origin[sim.matrix$sim.id == sim] == 'tropical' ) { extreme.bin = trop.orig.extreme };
if (sim.matrix$reg.of.origin[sim.matrix$sim.id == sim] == 'temperate' ) { extreme.bin = temp.orig.extreme };
max.time.actual = max(time.richness$time);
# If just a single timeslice, then use the end of the simulation or a designated time, otherwise space them equally
if (num.of.time.slices == 1) { timeslices = pre.equil.time};
if (which.time.slices != -999  ) { timeslices = which.time.slices };
if (num.of.time.slices > 1) {timeslices = as.integer(round(seq(max(time.richness$time)/num.of.time.slices,max(time.richness$time),length=num.of.time.slices),digits=0))};
if (time.sequence[1] != -999) {timeslices = subset(time.sequence,time.sequence <= max(time.richness$time))};
skipped.clades = 0
skipped.times = ""
timeslices
t = 100
sub.species = as.character(unique(subset(all.populations,time.of.sp.origin <= t & time.of.sp.extinction > t, select = 'spp.name'))[,1]);
# Some species may be extant globally (extant==1) but in our boundary regions (0,11) only;
# we need to eliminate species that are not extant within regions 1-10 (which is all that is
# reflected in the all.populations dataframe)
time.slice.populations = all.populations;
time.slice.populations$extant = 0;
time.slice.populations$extant[time.slice.populations$time.of.origin <= t & time.slice.populations$time.of.extinction > t] = 1
extant.ornot = aggregate(time.slice.populations$extant,by=list(time.slice.populations$spp.name),sum)
extinct.species = as.character(extant.ornot[extant.ornot$x==0,'Group.1'])
sub.species2 = sub.species[!sub.species %in% extinct.species]
tips.to.drop = as.character(phylo.out$tip.label[!phylo.out$tip.label %in% sub.species2]);
sub.phylo = drop.tip(phylo.out,tips.to.drop);
temp.root.time = max(dist.nodes(sub.phylo)[1:Ntip(sub.phylo),Ntip(sub.phylo) + 1]); temp.root.time;
most.recent.spp = sub.phylo$tip.label[as.numeric(names(which.max(dist.nodes(sub.phylo)[1:Ntip(sub.phylo),Ntip(sub.phylo) + 1])))]; most.recent.spp;
extinct.time.most.recent = unique(all.populations$time.of.sp.extinction[all.populations$spp.name==most.recent.spp]); extinct.time.most.recent;
sub.phylo$root.time = temp.root.time + max(c(0,max.time.actual - extinct.time.most.recent)); sub.phylo$root.time;
sub.phylo = collapse.singles(timeSliceTree(sub.phylo,sliceTime=(max.time.actual - t),plot=F,drop.extinct = T));
num.of.spp = length(sub.phylo$tip.label);
c = (num.of.spp+1)
sub.clade = clade.members(c, sub.phylo, tip.labels=T)
subset.populations = subset(all.populations, spp.name %in% as.numeric(sub.clade));
#sub.populations is the subset of populations specific to a particular clade and timeslice
sub.populations = subset(subset.populations, time.of.origin <= t & time.of.extinction > t)
#sub.clade.phylo is a specific simulation clade pulled from the phylogeny that was sliced at timeslice t
tips.to.drop2 = as.character(sub.phylo$tip.label[which(is.element(sub.phylo$tip.label,as.character(sub.populations$spp.name))==F)]);
sub.clade.phylo = drop.tip(sub.phylo,tips.to.drop2);
sub.clade.phylo$root.time = max(dist.nodes(sub.clade.phylo)[1:Ntip(sub.clade.phylo),Ntip(sub.clade.phylo) + 1]); sub.clade.phylo$root.time;
sub.clade.phylo$origin.time = t - sub.clade.phylo$root.time; sub.clade.phylo$origin.time;
if (identical(sort(as.integer(unique(sub.populations$spp.name))) , sort(as.integer(sub.clade.phylo$tip.label)))==F ) {print(c(c,t,'Error: trimmed phylogeny does not contain the correct species')); break} else{};
reg.summary = regional.calc(sub.populations[,c('region','spp.name','time.of.origin','reg.env','extant')], sub.clade.phylo, as.integer(t));
reg.summary
#Note that extinction calculation must be done on subset.populations, not sub.populations
extinction = extinct.calc(subset.populations, timeslice=t)
reg.summary2 = merge(reg.summary,extinction[,c('region','extinction.rate')],by='region')
?range
?mean
?var
summary(lm(reg.summary$MRD ~ reg.summary$richness))
summary(lm(reg.summary$MRD ~ reg.summary$richness))$coef
summary(lm(reg.summary$MRD ~ reg.summary$richness))$coef[2,1]
MRD.env.slope = summary(lm(reg.summary$MRD ~ reg.summary$reg.env))$coef[2,1]
MRD.env.slope
PSV.rich.slope = summary(lm(reg.summary$PSV ~ reg.summary$richness))$coef[2,1]
PSV.env.slope = summary(lm(reg.summary$PSV ~ reg.summary$reg.env))$coef[2,1]
PSV.rich.slope
PSV.env.slope
MRD.range = range(reg.summary$MRD,na.rm = T)
MRD.mean = mean(reg.summary$MRD,na.rm = T)
MRD.var = var(reg.summary$MRD,na.rm = T)
MRD.rich.slope = summary(lm(reg.summary$MRD ~ reg.summary$richness))$coef[2,1]
MRD.env.slope = summary(lm(reg.summary$MRD ~ reg.summary$reg.env))$coef[2,1]
PSV.range = range(reg.summary$PSV,na.rm = T)
PSV.mean = mean(reg.summary$PSV,na.rm = T)
PSV.var = var(reg.summary$PSV,na.rm = T)
PSV.rich.slope = summary(lm(reg.summary$PSV ~ reg.summary$richness))$coef[2,1]
PSV.env.slope = summary(lm(reg.summary$PSV ~ reg.summary$reg.env))$coef[2,1]
n.div.regions = length(reg.summary$region[reg.summary$richness > 1])
corr.results = cbind(xregion.analysis(reg.summary2),MRD.range,MRD.mean,MRD.var,MRD.rich.slope,MRD.env.slope,
PSV.range,PSV.mean,PSV.var,PSV.rich.slope,PSV.env.slope,n.div.regions)
corr.results
xregion.analysis(reg.summary2)
MRD.range,MRD.mean,MRD.var,MRD.rich.slope
MRD.range
corr.results = cbind(xregion.analysis(reg.summary2),MRD.range,MRD.mean,MRD.var,MRD.rich.slope,MRD.env.slope,
PSV.range,PSV.mean,PSV.var,PSV.rich.slope,PSV.env.slope,n.div.regions)
corr.results
MRD.range
?max
?diff
?subtract
PSV.range = max(reg.summary$PSV,na.rm = T) - min(reg.summary$PSV,na.rm = T)
PSV.range
max(reg.summary$PSV,na.rm = T)
min(reg.summary$PSV,na.rm = T)
MRD.range = max(reg.summary$MRD,na.rm = T) - min(reg.summary$MRD,na.rm = T)
MRD.mean = mean(reg.summary$MRD,na.rm = T)
MRD.var = var(reg.summary$MRD,na.rm = T)
MRD.rich.slope = summary(lm(reg.summary$MRD ~ reg.summary$richness))$coef[2,1]
MRD.env.slope = summary(lm(reg.summary$MRD ~ reg.summary$reg.env))$coef[2,1]
PSV.range = max(reg.summary$PSV,na.rm = T) - min(reg.summary$PSV,na.rm = T)
PSV.mean = mean(reg.summary$PSV,na.rm = T)
PSV.var = var(reg.summary$PSV,na.rm = T)
PSV.rich.slope = summary(lm(reg.summary$PSV ~ reg.summary$richness))$coef[2,1]
PSV.env.slope = summary(lm(reg.summary$PSV ~ reg.summary$reg.env))$coef[2,1]
n.div.regions = length(reg.summary$region[reg.summary$richness > 1])
corr.results = cbind(xregion.analysis(reg.summary2),MRD.range,MRD.mean,MRD.var,MRD.rich.slope,MRD.env.slope,
PSV.range,PSV.mean,PSV.var,PSV.rich.slope,PSV.env.slope,n.div.regions)
corr.results
#Pybus & Harvey (2000)'s gamma statistic
Gamma.stat = gammaStat(sub.clade.phylo)
#Calculate Blomberg's K for two traits: environmental optimum, and mean region of occurrence
spp.traits = aggregate(sub.populations$region, by = list(sub.populations$spp.name, sub.populations$env.opt),
function(x) mean(x, na.rm=T))
names(spp.traits) = c('spp.name','env.opt','region')
spp.env = spp.traits$env.opt
names(spp.env) = spp.traits$spp.name
BK.env = phylosig(sub.clade.phylo, spp.env[sub.clade.phylo$tip.label], method="K")
spp.reg = spp.traits$region
names(spp.reg) = spp.traits$spp.name
BK.reg = phylosig(sub.clade.phylo, spp.reg[sub.clade.phylo$tip.label], method="K")
output = rbind(output, cbind(sim=sim,clade.id = c, time = t, corr.results, gamma.stat = Gamma.stat,
clade.richness = length(unique(sub.populations$spp.name)),
BK.env = BK.env , BK.reg = BK.reg))
output
