sim.matrix = read.csv(paste(repo_dir,'/SENC_Master_Simulation_Matrix.csv',sep=""),header=T)
simstats2 = merge(simstats, sim.matrix[,c(1,3:10,15,16)],by.x='sim',by.y='sim.id',all.x=T)
simstats3 = subset(simstats2, sim %in% which.sims)
simstats3$scenario = paste(simstats3$carry.cap,simstats3$energy.gradient)
simstats3$reg.of.origin = as.character(simstats3$reg.of.origin)
tropical.shade = 'red'
temperate.shade = 'blue'
boxplot.cols = c(rep(temperate.shade,3),rep(tropical.shade,3))
pdf(paste(analysis_dir,'/summaryplots/3scenarios_MRDPSV_',Sys.Date(),'.pdf',sep=''),height=6,width=8)
par(mfrow=c(2,1), mar=c(1,5,1,1), oma=c(2,1,1,1), las=1)
boxplot(simstats3$r.MRD.rich ~ simstats3$scenario + simstats3$reg.of.origin,
ylab=expression(italic(r)[MRD-richness]), xaxt="n",
col = boxplot.cols, border = boxplot.cols, lwd=1,cex.axis=0.8, cex.lab = 1.5)
mtext("Temperate Origin",side=3,adj=0.2,line=0.5,cex=1)
mtext("Tropical Origin",side=3,adj = 0.8, line=0.5,cex=1)
boxplot(simstats3$r.PSV.rich ~ simstats3$scenario + simstats3$reg.of.origin,
ylab=expression(italic(r)[PSV-richness]), xaxt="n",
col = boxplot.cols, border = boxplot.cols,lwd=1,cex.axis=0.8, cex.lab=1.5)
axis(1,rep(c('Time','Disturbance',''),2),at=1:6,cex.axis=1)
mtext(rep('Energy\nGradient',2), 1,at=c(3,6), line=1.5)
dev.off()
# Plot boxplots of gamma (phylogenetic tree shape statistic) across 3 scenarios
# (K gradient, disturbance gradient, or no limit) and 2 regions of origin.
Allen = 0;
if (Allen ==1) {
sim_dir = "C:/SENCoutput/senc_reps_analysis"
analysis_dir = "//bioark.bio.unc.edu/hurlbertallen/manuscripts/cladevscommunity/analyses/"
repo_dir = "C:/Documents and Settings/Hurlbert/species-energy-simulation"
}
if (Allen == 0) {
sim_dir = "C:/Users/steg815/Desktop/Stegen_PNNL/Spp-Energy-Niche-Conserv/sims.out.130204"
analysis_dir = "C:/Users/steg815/Desktop/Stegen_PNNL/Spp-Energy-Niche-Conserv/sims.out.130204"
repo_dir = "C:/Users/steg815/Desktop/Stegen_PNNL/Spp-Energy-Niche-Conserv/species-energy-simulation"
}
which.sims = c(3465:4064); length(which.sims);
#rootclade.stats = compile.firstlines(sim_dir,"SENC_Stats_sim")
simstats = read.csv(paste(analysis_dir,"/rootclade_stats_sims2925-4064.csv",sep=""), header=T)
head(simstats)
simstats = rbind(simstats,read.csv(paste(analysis_dir,"/rootclade_slice_stats_sims3665-3861.csv",sep=""), header=T))
sim.matrix = read.csv(paste(repo_dir,'/SENC_Master_Simulation_Matrix.csv',sep=""),header=T)
dim(simsstats)
dim(simstats)
simstats2 = merge(simstats, sim.matrix[,c(1,3:10,15,16)],by.x='sim',by.y='sim.id',all.x=T)
simstats3 = subset(simstats2, sim %in% which.sims)
dim(simstats2)
dim(simstats3)
simstats3$scenario = paste(simstats3$carry.cap,simstats3$energy.gradient,simstats3$time)
simstats3$reg.of.origin = as.character(simstats3$reg.of.origin)
head(simstats3)
simstats = read.csv(paste(analysis_dir,"/rootclade_stats_sims2925-4064.csv",sep=""), header=T);
simstats$timeslice = 'no';
slicestats = read.csv(paste(analysis_dir,"/rootclade_slice_stats_sims3665-3861.csv",sep=""), header=T);
slicestats$timeslice = 'yes';
simstats = rbind(simstats,slicestats);
sim.matrix = read.csv(paste(repo_dir,'/SENC_Master_Simulation_Matrix.csv',sep=""),header=T)
simstats2 = merge(simstats, sim.matrix[,c(1,3:10,15,16)],by.x='sim',by.y='sim.id',all.x=T)
simstats3 = subset(simstats2, sim %in% which.sims)
dim(simstats3)
simstats3$scenario = paste(simstats3$carry.cap,simstats3$energy.gradient,simstats3$timeslice)
simstats3$reg.of.origin = as.character(simstats3$reg.of.origin)
head(simstats3)
tropical.shade = 'red'
temperate.shade = 'blue'
?subset
plot.disturbance = 0;
if(plot.disturbance == 1) {simstats3 = subset(simstats3,simstat3$scenario != 'on on yes')}
plot.disturbance = 1;
if(plot.disturbance == 1) {simstats3 = subset(simstats3,simstat3$scenario != 'on on yes')}
if(plot.disturbance == 1) {simstats3 = subset(simstats3,simstats3$scenario != 'on on yes')}
head(simstats3)
unique(simstats3$scenario)
simstats3 = subset(simstats2, sim %in% which.sims)
simstats3$scenario = paste(simstats3$carry.cap,simstats3$energy.gradient,simstats3$timeslice)
simstats3$reg.of.origin = as.character(simstats3$reg.of.origin)
tropical.shade = 'red'
temperate.shade = 'blue'
plot.disturbance = 0;
if(plot.disturbance == 1) {simstats3 = subset(simstats3,simstats3$scenario != 'on on yes')}
if(plot.disturbance == 0) {simstats3 = subset(simstats3,simstats3$scenario != 'on off no')}
unique(simstats3$scenario)
boxplot.cols = c(rep(temperate.shade,3),rep(tropical.shade,3))
boxplot(simstats3$r.MRD.rich ~ simstats3$scenario + simstats3$reg.of.origin,
ylab=expression(italic(r)[MRD-richness]), xaxt="n",
col = boxplot.cols, border = boxplot.cols, lwd=1,cex.axis=0.8, cex.lab = 1.5)
boxplot(simstats3$r.MRD.rich ~ simstats3$scenario + simstats3$reg.of.origin,
ylab=expression(italic(r)[MRD-richness]),
col = boxplot.cols, border = boxplot.cols, lwd=1,cex.axis=0.8, cex.lab = 1.5)
boxplot(simstats3$r.MRD.rich ~ simstats3$scenario + simstats3$reg.of.origin,
ylab=expression(italic(r)[MRD-richness]), xaxt="n",
col = boxplot.cols, border = boxplot.cols, lwd=1,cex.axis=0.8, cex.lab = 1.5)
mtext("Temperate Origin",side=3,adj=0.2,line=0.5,cex=1)
mtext("Tropical Origin",side=3,adj = 0.8, line=0.5,cex=1)
par(mfrow=c(2,1), mar=c(1,5,1,1), oma=c(2,1,1,1), las=1)
boxplot(simstats3$r.MRD.rich ~ simstats3$scenario + simstats3$reg.of.origin,
ylab=expression(italic(r)[MRD-richness]), xaxt="n",
col = boxplot.cols, border = boxplot.cols, lwd=1,cex.axis=0.8, cex.lab = 1.5)
mtext("Temperate Origin",side=3,adj=0.2,line=0.5,cex=1)
mtext("Tropical Origin",side=3,adj = 0.8, line=0.5,cex=1)
mtext(rep('Energy\nGradient',2), 1,at=c(2,5), line=1.5)
axis(1,rep(c('Time',,'Pre-Equilibrium'),2),at=1:6,cex.axis=1)
axis(1,rep(c('Time','','Pre-Equilibrium'),2),at=1:6,cex.axis=1)
boxplot(simstats3$r.MRD.rich ~ simstats3$scenario + simstats3$reg.of.origin,
ylab=expression(italic(r)[MRD-richness]), xaxt="n",
col = boxplot.cols, border = boxplot.cols, lwd=1,cex.axis=0.8, cex.lab = 1.5)
mtext("Temperate Origin",side=3,adj=0.2,line=0.5,cex=1)
mtext("Tropical Origin",side=3,adj = 0.8, line=0.5,cex=1)
boxplot(simstats3$r.PSV.rich ~ simstats3$scenario + simstats3$reg.of.origin,
ylab=expression(italic(r)[PSV-richness]), xaxt="n",
col = boxplot.cols, border = boxplot.cols,lwd=1,cex.axis=0.8, cex.lab=1.5)
axis(1,rep(c('Time','','Pre-Equilibrium'),2),at=1:6,cex.axis=1)
mtext(rep('Energy\nGradient',2), 1,at=c(2,5), line=1.5)
par(mfrow=c(2,1), mar=c(1,5,1,1), oma=c(2,1,1,1), las=1)
boxplot(simstats3$r.MRD.rich ~ simstats3$scenario + simstats3$reg.of.origin,
ylab=expression(italic(r)[MRD-richness]), xaxt="n",
col = boxplot.cols, border = boxplot.cols, lwd=1,cex.axis=0.8, cex.lab = 1.5)
mtext("Temperate Origin",side=3,adj=0.2,line=0.5,cex=1)
mtext("Tropical Origin",side=3,adj = 0.8, line=0.5,cex=1)
boxplot(simstats3$r.PSV.rich ~ simstats3$scenario + simstats3$reg.of.origin,
ylab=expression(italic(r)[PSV-richness]), xaxt="n",
col = boxplot.cols, border = boxplot.cols,lwd=1,cex.axis=0.8, cex.lab=1.5)
axis(1,rep(c('Time','','Pre-Equilibrium'),2),at=1:6,cex.axis=1)
mtext(rep('Energy\nGradient',2), 1,at=c(2,5), line=1.5)
pdf(paste(analysis_dir,'/summaryplots/3scenarios_MRDPSV_',Sys.Date(),'.pdf',sep=''),height=6,width=8)
par(mfrow=c(2,1), mar=c(1,5,1,1), oma=c(2,1,1,1), las=1)
boxplot(simstats3$r.MRD.rich ~ simstats3$scenario + simstats3$reg.of.origin,
ylab=expression(italic(r)[MRD-richness]), xaxt="n",
col = boxplot.cols, border = boxplot.cols, lwd=1,cex.axis=0.8, cex.lab = 1.5)
mtext("Temperate Origin",side=3,adj=0.2,line=0.5,cex=1)
mtext("Tropical Origin",side=3,adj = 0.8, line=0.5,cex=1)
boxplot(simstats3$r.PSV.rich ~ simstats3$scenario + simstats3$reg.of.origin,
ylab=expression(italic(r)[PSV-richness]), xaxt="n",
col = boxplot.cols, border = boxplot.cols,lwd=1,cex.axis=0.8, cex.lab=1.5)
if (plot.disturbance == 0) {
axis(1,rep(c('Time','','Pre-Equilibrium'),2),at=1:6,cex.axis=1)
mtext(rep('Energy\nGradient',2), 1,at=c(2,5), line=1.5)
};
if (plot.disturbance == 1) {
# would need to remake this
};
dev.off()
dev.off()
dev.off()
# Plot env-richness and time-richness correlations as function of clade age
Allen = 0;
if (Allen ==1) {
sim_dir = "C:/SENCoutput/senc_reps_analysis"
analysis_dir = "//bioark.bio.unc.edu/hurlbertallen/manuscripts/cladevscommunity/analyses/"
repo_dir = "C:/Documents and Settings/Hurlbert/species-energy-simulation"
}
if (Allen == 0) {
sim_dir = "C:/Users/steg815/Desktop/Stegen_PNNL/Spp-Energy-Niche-Conserv/sims.out.130204"
analysis_dir = "C:/Users/steg815/Desktop/Stegen_PNNL/Spp-Energy-Niche-Conserv/sims.out.130204"
repo_dir = "C:/Users/steg815/Desktop/Stegen_PNNL/Spp-Energy-Niche-Conserv/species-energy-simulation"
}
Dtrop.all = read.csv(paste(sim_dir,'/SENC_Stats_D.sims.trop.csv',sep=''), header=T)
Ttrop.all = read.csv(paste(sim_dir,'/SENC_Stats_T.sims.trop.csv',sep=''), header=T)
Ktrop.all = read.csv(paste(sim_dir,'/SENC_Stats_K.sims.trop.csv',sep=''), header=T)
Ktrop.slice.all = read.csv(paste(sim_dir,'/SENC_Stats_K.slice.sims.trop.csv',sep=''), header=T)
Dtemp.all = read.csv(paste(sim_dir,'/SENC_Stats_D.sims.temp.csv',sep=''), header=T)
Ttemp.all = read.csv(paste(sim_dir,'/SENC_Stats_T.sims.temp.csv',sep=''), header=T)
Ktemp.all = read.csv(paste(sim_dir,'/SENC_Stats_K.sims.temp.csv',sep=''), header=T)
Ktemp.slice.all = read.csv(paste(sim_dir,'/SENC_Stats_K.slice.sims.temp.csv',sep=''), header=T)
Dtrop = subset(Dtrop.all, clade.richness >= 30 & n.regions >=5)
Ttrop = subset(Ttrop.all, clade.richness >= 30 & n.regions >=5)
Ktrop = subset(Ktrop.all, clade.richness >= 30 & n.regions >=5)
Ktrop.slice = subset(Ktrop.slice.all, clade.richness >= 30 & n.regions >=5)
Dtemp = subset(Dtemp.all, clade.richness >= 30 & n.regions >=5)
Ttemp = subset(Ttemp.all, clade.richness >= 30 & n.regions >=5)
Ktemp = subset(Ktemp.all, clade.richness >= 30 & n.regions >=5)
Ktemp.slice = subset(Ktemp.slice.all, clade.richness >= 30 & n.regions >=5)
#Calculate difference between time-richness correlation and environment-richness correlation
Dtrop$time.env.r.diff = Dtrop$r.time.rich - Dtrop$r.env.rich
Ttrop$time.env.r.diff = Ttrop$r.time.rich - Ttrop$r.env.rich
Ktrop$time.env.r.diff = Ktrop$r.time.rich - Ktrop$r.env.rich
Ktrop.slice$time.env.r.diff = Ktrop.slice$r.time.rich - Ktrop.slice$r.env.rich
Dtemp$time.env.r.diff = Dtemp$r.time.rich - Dtemp$r.env.rich
Ttemp$time.env.r.diff = Ttemp$r.time.rich - Ttemp$r.env.rich
Ktemp$time.env.r.diff = Ktemp$r.time.rich - Ktemp$r.env.rich
Ktemp.slice$time.env.r.diff = Ktemp.slice$r.time.rich - Ktemp.slice$r.env.rich
plot.disturbance = 0;
pdf(paste(analysis_dir,'/summaryplots/corrDiff__vs_cladeAgeRich',Sys.Date(),'.pdf',sep=''), height=6, width = 8)
par(mfrow=c(2,3), mar = c(5,2,2,1), oma=c(1,5,1,1), mgp = c(4,1,0))
cexpts = 0.5
cexaxis = 1.5
cexlab = 2
cexmain = 2
#Vs clade origin time
plot(log10(Ttrop$clade.origin.time), Ttrop$time.env.r.diff, pch=16, col='red',ylim=c(-2,2),xlab="",
ylab= "",cex=cexpts, main='Time', cex.lab = cexlab, cex.axis = cexaxis, cex.main=cexmain)
points(log10(Ttemp$clade.origin.time), Ttemp$time.env.r.diff, col='blue',cex=cexpts)
abline(h=0,lty='dashed')
legend('bottomleft',c('temperate origin','tropical origin'), pch = c(1,16), col = c('blue','red'), cex=1.5)
if (plot.disturbance == 1) {
plot(log10(Dtrop$clade.origin.time), Dtrop$time.env.r.diff, pch=16, col='red',ylim=c(-2,2),
xlab="", ylab= "",cex=cexpts, main='Disturbance', cex.lab = cexlab, cex.axis = cexaxis, cex.main=cexmain)
points(log10(Dtemp$clade.origin.time), Dtemp$time.env.r.diff, col='blue',cex=cexpts)
abline(h=0,lty='dashed')
mtext(expression(paste(plain(log)[10]," Time of Clade Origin")), 1, line=3.5, cex = 1.5)
};
plot(log10(Ktrop$clade.origin.time), Ktrop$time.env.r.diff, pch=16, col='red',ylim=c(-2,2),xlab="",
ylab= "",cex=cexpts, main='Energy Gradient', cex.lab = cexlab, cex.axis = cexaxis, cex.main=cexmain)
points(log10(Ktemp$clade.origin.time), Ktemp$time.env.r.diff, col='blue',cex=cexpts)
abline(h=0,lty='dashed')
if (plot.disturbance == 1) {
plot(log10(Dtrop$clade.origin.time), Dtrop$time.env.r.diff, pch=16, col='red',ylim=c(-2,2),
xlab="", ylab= "",cex=cexpts, main='Disturbance', cex.lab = cexlab, cex.axis = cexaxis, cex.main=cexmain)
points(log10(Dtemp$clade.origin.time), Dtemp$time.env.r.diff, col='blue',cex=cexpts)
abline(h=0,lty='dashed')
mtext(expression(paste(plain(log)[10]," Time of Clade Origin")), 1, line=3.5, cex = 1.5)
};
if (plot.disturbance == 0) {
plot(log10(Ktrop.slice$clade.origin.time), Ktrop.slice$time.env.r.diff, pch=16, col='red',ylim=c(-2,2),
xlab="", ylab= "",cex=cexpts, main='Pre-Equilibrium', cex.lab = cexlab, cex.axis = cexaxis, cex.main=cexmain)
points(log10(Ktemp.slice$clade.origin.time), Ktemp.slice$time.env.r.diff, col='blue',cex=cexpts)
abline(h=0,lty='dashed')
mtext(expression(paste(plain(log)[10]," Time of Clade Origin")), 1, line=3.5, cex = 1.5)
};
# Vs clade richness
plot(log10(Ttrop$clade.richness), Ttrop$time.env.r.diff, pch=16, col='red',ylim=c(-2,2),xlab="",
ylab= "",cex=cexpts, main='', cex.lab = cexlab, cex.axis = cexaxis, cex.main=cexmain)
points(log10(Ttemp$clade.richness), Ttemp$time.env.r.diff, col='blue',cex=cexpts)
abline(h=0,lty='dashed')
plot(log10(Ktrop$clade.richness), Ktrop$time.env.r.diff, pch=16, col='red',ylim=c(-2,2),xlab="",
ylab= "",cex=cexpts, main='', cex.lab = cexlab, cex.axis = cexaxis, cex.main=cexmain)
points(log10(Ktemp$clade.richness), Ktemp$time.env.r.diff, col='blue',cex=cexpts)
abline(h=0,lty='dashed')
if (plot.disturbance == 1) {
plot(log10(Dtrop$clade.richness), Dtrop$time.env.r.diff, pch=16, col='red',ylim=c(-2,2),
xlab="", ylab= "",cex=cexpts, main='', cex.lab = cexlab, cex.axis = cexaxis, cex.main=cexmain)
points(log10(Dtemp$clade.richness), Dtemp$time.env.r.diff, col='blue',cex=cexpts)
abline(h=0,lty='dashed')
mtext(expression(paste(plain(log)[10]," Clade Richness")), 1, line=3.5, cex = 1.5)
}
if (plot.disturbance == 0) {
plot(log10(Ktrop.slice$clade.richness), Ktrop.slice$time.env.r.diff, pch=16, col='red',ylim=c(-2,2),
xlab="", ylab= "",cex=cexpts, main='', cex.lab = cexlab, cex.axis = cexaxis, cex.main=cexmain)
points(log10(Ktemp.slice$clade.richness), Ktemp.slice$time.env.r.diff, col='blue',cex=cexpts)
abline(h=0,lty='dashed')
mtext(expression(paste(plain(log)[10]," Clade Richness")), 1, line=3.5, cex = 1.5)
}
mtext(expression(paste(italic(r)[time-richness]," - ",italic(r)[environment-richness])), 2, outer=T, line=2, cex = cexlab)
dev.off()
# Plot env-richness and time-richness correlations as function of clade age
Allen = 0;
if (Allen ==1) {
sim_dir = "C:/SENCoutput/senc_reps_analysis"
analysis_dir = "//bioark.bio.unc.edu/hurlbertallen/manuscripts/cladevscommunity/analyses/"
repo_dir = "C:/Documents and Settings/Hurlbert/species-energy-simulation"
}
if (Allen == 0) {
sim_dir = "C:/Users/steg815/Desktop/Stegen_PNNL/Spp-Energy-Niche-Conserv/sims.out.130204"
analysis_dir = "C:/Users/steg815/Desktop/Stegen_PNNL/Spp-Energy-Niche-Conserv/sims.out.130204"
repo_dir = "C:/Users/steg815/Desktop/Stegen_PNNL/Spp-Energy-Niche-Conserv/species-energy-simulation"
}
Dtrop.all = read.csv(paste(sim_dir,'/SENC_Stats_D.sims.trop.csv',sep=''), header=T)
Ttrop.all = read.csv(paste(sim_dir,'/SENC_Stats_T.sims.trop.csv',sep=''), header=T)
Ktrop.all = read.csv(paste(sim_dir,'/SENC_Stats_K.sims.trop.csv',sep=''), header=T)
Ktrop.slice.all = read.csv(paste(sim_dir,'/SENC_Stats_K.slice.sims.trop.csv',sep=''), header=T)
Dtemp.all = read.csv(paste(sim_dir,'/SENC_Stats_D.sims.temp.csv',sep=''), header=T)
Ttemp.all = read.csv(paste(sim_dir,'/SENC_Stats_T.sims.temp.csv',sep=''), header=T)
Ktemp.all = read.csv(paste(sim_dir,'/SENC_Stats_K.sims.temp.csv',sep=''), header=T)
Ktemp.slice.all = read.csv(paste(sim_dir,'/SENC_Stats_K.slice.sims.temp.csv',sep=''), header=T)
Dtrop = subset(Dtrop.all, clade.richness >= 30 & n.regions >=5)
Ttrop = subset(Ttrop.all, clade.richness >= 30 & n.regions >=5)
Ktrop = subset(Ktrop.all, clade.richness >= 30 & n.regions >=5)
Ktrop.slice = subset(Ktrop.slice.all, clade.richness >= 30 & n.regions >=5)
Dtemp = subset(Dtemp.all, clade.richness >= 30 & n.regions >=5)
Ttemp = subset(Ttemp.all, clade.richness >= 30 & n.regions >=5)
Ktemp = subset(Ktemp.all, clade.richness >= 30 & n.regions >=5)
Ktemp.slice = subset(Ktemp.slice.all, clade.richness >= 30 & n.regions >=5)
#Calculate difference between time-richness correlation and environment-richness correlation
Dtrop$time.env.r.diff = Dtrop$r.time.rich - Dtrop$r.env.rich
Ttrop$time.env.r.diff = Ttrop$r.time.rich - Ttrop$r.env.rich
Ktrop$time.env.r.diff = Ktrop$r.time.rich - Ktrop$r.env.rich
Ktrop.slice$time.env.r.diff = Ktrop.slice$r.time.rich - Ktrop.slice$r.env.rich
Dtemp$time.env.r.diff = Dtemp$r.time.rich - Dtemp$r.env.rich
Ttemp$time.env.r.diff = Ttemp$r.time.rich - Ttemp$r.env.rich
Ktemp$time.env.r.diff = Ktemp$r.time.rich - Ktemp$r.env.rich
Ktemp.slice$time.env.r.diff = Ktemp.slice$r.time.rich - Ktemp.slice$r.env.rich
plot.disturbance = 0;
pdf(paste(analysis_dir,'/summaryplots/corrDiff__vs_cladeAgeRich',Sys.Date(),'.pdf',sep=''), height=6, width = 8)
par(mfrow=c(2,3), mar = c(5,2,2,1), oma=c(1,5,1,1), mgp = c(4,1,0))
cexpts = 0.5
cexaxis = 1.5
cexlab = 2
cexmain = 2
#Vs clade origin time
plot(log10(Ttrop$clade.origin.time), Ttrop$time.env.r.diff, pch=16, col='red',ylim=c(-2,2),xlab="",
ylab= "",cex=cexpts, main='Time', cex.lab = cexlab, cex.axis = cexaxis, cex.main=cexmain)
points(log10(Ttemp$clade.origin.time), Ttemp$time.env.r.diff, col='blue',cex=cexpts)
abline(h=0,lty='dashed')
legend('bottomleft',c('temperate origin','tropical origin'), pch = c(1,16), col = c('blue','red'), cex=1.5)
if (plot.disturbance == 1) {
plot(log10(Dtrop$clade.origin.time), Dtrop$time.env.r.diff, pch=16, col='red',ylim=c(-2,2),
xlab="", ylab= "",cex=cexpts, main='Disturbance', cex.lab = cexlab, cex.axis = cexaxis, cex.main=cexmain)
points(log10(Dtemp$clade.origin.time), Dtemp$time.env.r.diff, col='blue',cex=cexpts)
abline(h=0,lty='dashed')
mtext(expression(paste(plain(log)[10]," Time of Clade Origin")), 1, line=3.5, cex = 1.5)
};
plot(log10(Ktrop$clade.origin.time), Ktrop$time.env.r.diff, pch=16, col='red',ylim=c(-2,2),xlab="",
ylab= "",cex=cexpts, main='Energy Gradient', cex.lab = cexlab, cex.axis = cexaxis, cex.main=cexmain)
points(log10(Ktemp$clade.origin.time), Ktemp$time.env.r.diff, col='blue',cex=cexpts)
abline(h=0,lty='dashed')
mtext(expression(paste(plain(log)[10]," Time of Clade Origin")), 1, line=3.5, cex = 1.5)
if (plot.disturbance == 1) {
plot(log10(Dtrop$clade.origin.time), Dtrop$time.env.r.diff, pch=16, col='red',ylim=c(-2,2),
xlab="", ylab= "",cex=cexpts, main='Disturbance', cex.lab = cexlab, cex.axis = cexaxis, cex.main=cexmain)
points(log10(Dtemp$clade.origin.time), Dtemp$time.env.r.diff, col='blue',cex=cexpts)
abline(h=0,lty='dashed')
};
if (plot.disturbance == 0) {
plot(log10(Ktrop.slice$clade.origin.time), Ktrop.slice$time.env.r.diff, pch=16, col='red',ylim=c(-2,2),
xlab="", ylab= "",cex=cexpts, main='Pre-Equilibrium', cex.lab = cexlab, cex.axis = cexaxis, cex.main=cexmain)
points(log10(Ktemp.slice$clade.origin.time), Ktemp.slice$time.env.r.diff, col='blue',cex=cexpts)
abline(h=0,lty='dashed')
};
# Vs clade richness
plot(log10(Ttrop$clade.richness), Ttrop$time.env.r.diff, pch=16, col='red',ylim=c(-2,2),xlab="",
ylab= "",cex=cexpts, main='', cex.lab = cexlab, cex.axis = cexaxis, cex.main=cexmain)
points(log10(Ttemp$clade.richness), Ttemp$time.env.r.diff, col='blue',cex=cexpts)
abline(h=0,lty='dashed')
plot(log10(Ktrop$clade.richness), Ktrop$time.env.r.diff, pch=16, col='red',ylim=c(-2,2),xlab="",
ylab= "",cex=cexpts, main='', cex.lab = cexlab, cex.axis = cexaxis, cex.main=cexmain)
points(log10(Ktemp$clade.richness), Ktemp$time.env.r.diff, col='blue',cex=cexpts)
abline(h=0,lty='dashed')
mtext(expression(paste(plain(log)[10]," Clade Richness")), 1, line=3.5, cex = 1.5)
if (plot.disturbance == 1) {
plot(log10(Dtrop$clade.richness), Dtrop$time.env.r.diff, pch=16, col='red',ylim=c(-2,2),
xlab="", ylab= "",cex=cexpts, main='', cex.lab = cexlab, cex.axis = cexaxis, cex.main=cexmain)
points(log10(Dtemp$clade.richness), Dtemp$time.env.r.diff, col='blue',cex=cexpts)
abline(h=0,lty='dashed')
}
if (plot.disturbance == 0) {
plot(log10(Ktrop.slice$clade.richness), Ktrop.slice$time.env.r.diff, pch=16, col='red',ylim=c(-2,2),
xlab="", ylab= "",cex=cexpts, main='', cex.lab = cexlab, cex.axis = cexaxis, cex.main=cexmain)
points(log10(Ktemp.slice$clade.richness), Ktemp.slice$time.env.r.diff, col='blue',cex=cexpts)
abline(h=0,lty='dashed')
}
mtext(expression(paste(italic(r)[time-richness]," - ",italic(r)[environment-richness])), 2, outer=T, line=2, cex = cexlab)
dev.off()
#!/usr/bin/env Rscript
#sim = commandArgs();
#sim = as.numeric(sim[length(sim)]);
# Choose number of time slices per simulation to analyze
num.of.time.slices = 10;
# Set minimum number of species in a clade needed to proceed with analysis
min.num.spp = 8;
Allen = 0;
partial.analysis = 1; # toggle to determine whether we're looking at all sims or just some
#New parameter for taking into account which of us is running this code
if(Allen==1) {
setwd('c:/documents and settings/hurlbert/species-energy-simulation')
Rlib.location = "C:/program files/R/R-2.15.2/library"
sim_dir = "C:/SENCoutput"
analysis_dir = "//bioark.bio.unc.edu/hurlbertallen/manuscripts/cladevscommunity/analyses"
} else {
setwd('C:/Users/steg815/Desktop/Stegen_PNNL/Spp-Energy-Niche-Conserv/species-energy-simulation')
sim_dir = "C:/Users/steg815/Desktop/Stegen_PNNL/Spp-Energy-Niche-Conserv/sims.out.130204" #wherever all of your zipped output files are
analysis_dir = "C:/Users/steg815/Desktop/Stegen_PNNL/Spp-Energy-Niche-Conserv/sims.out.130204" #wherever you want to store the results of these analyses
}
# Simulation workflow
#(2) load simulation and analysis functions
if (Allen==1){
library(ape,lib.loc=Rlib.location);
library(permute,lib.loc=Rlib.location);
library(nlme,lib.loc=Rlib.location);
library(vegan,lib.loc=Rlib.location);
library(picante,lib.loc=Rlib.location);
library(mvtnorm,lib.loc=Rlib.location);
library(caper,lib.loc=Rlib.location);
library(paleotree,lib.loc=Rlib.location);
library(plyr,lib.loc=Rlib.location);
library(phytools, lib.loc=Rlib.location);
library(foreach,lib.loc=Rlib.location);
library(doParallel,lib.loc=Rlib.location);
} else {
library(ape);
library(permute);
library(nlme);
library(vegan);
library(picante);
library(mvtnorm);
library(caper);
library(paleotree);
library(plyr);
library(phytools);
library(foreach);
library(doParallel);
}
package.vector = c('ape','permute','nlme','vegan','picante','mvtnorm','caper','paleotree','plyr','phytools');
source('reg_calc_and_analysis.r');
source('make.phylo.jimmy.fun.r');
source('lat.grad.time.plot.r');
source('clade.origin.corr.plot.r');
source('clade.exmpl.figs.r');
source('extinct.calc.r');
source('unzipping_files.r');
cl = makeCluster(3);
registerDoParallel(cl);
#(3) read in master simulation matrix with chosen parameter combinations;
# then add fields for storing output summary
sim.matrix = as.data.frame(read.csv("SENC_Master_Simulation_Matrix.csv",header=T));
sim.matrix$n.regions = NA
sim.matrix$extant.S = NA
sim.matrix$extinct.S = NA
sim.matrix$skipped.clades = NA
sim.matrix$skipped.times = NA
sim.matrix$BK.reg = NA
sim.matrix$BK.env = NA
#(4) start analyses based on value of 'sim' which draws parameter values from sim.matrix
if (partial.analysis == 0) {which.sims = 1:max(sim.matrix$sim.id)};
if (partial.analysis == 1) {which.sims = c(sim.matrix$sim.id[sim.matrix$carry.cap == 'on' & sim.matrix$energy.gradient == 'on' & sim.matrix$sim.id > 3464])}; # which.sims = c(read.csv(paste(analysis_dir,"/sims.to.analyze.csv",sep=""))$x)
which.sims = which.sims[1:10];
which.sims
which.sims = which.sims[1];
which.sims
trop.orig.extreme = 3;
temp.orig.extreme = 8;
pre.equil.time = 5459;
sim=which.sims
output = numeric();
# (5) read in simulation results for specified simulation from the output zip file
sim.results = output.unzip(sim_dir,sim)
all.populations = sim.results$all.populations
time.richness = sim.results$time.richness
phylo.out = sim.results$phylo.out
params.out = sim.results$params.out
max.time.actual = max(time.richness$time);
max.time.actual
# If just a single timeslice, then use the end of the simulation or a designated time, otherwise space them equally
if (num.of.time.slices==1) {
timeslices = pre.equil.time
} else {
timeslices = as.integer(round(seq(max(time.richness$time)/num.of.time.slices,max(time.richness$time),length=num.of.time.slices),digits=0));
}
timeslices
skipped.clades = 0
skipped.times = ""
for (t in timeslices) {
# vector of species in existence at time t
sub.species = as.character(unique(subset(all.populations,time.of.sp.origin <= t & time.of.sp.extinction > t, select = 'spp.name'))[,1]);
# Some species may be extant globally (extant==1) but in our boundary regions (0,11) only;
# we need to eliminate species that are not extant within regions 1-10 (which is all that is
# reflected in the all.populations dataframe)
time.slice.populations = all.populations;
time.slice.populations$extant = 0;
time.slice.populations$extant[time.slice.populations$time.of.origin <= t & time.slice.populations$time.of.extinction > t] = 1
extant.ornot = aggregate(time.slice.populations$extant,by=list(time.slice.populations$spp.name),sum)
extinct.species = as.character(extant.ornot[extant.ornot$x==0,'Group.1'])
# FIXME:
# Add more explanatory comments justifying why we don't need to consider species that existed
# at time t but went extinct before the present.
# In some cases (e.g. sim 1 or 2, t=6000), tips.to.drop includes all tips and so sub.phylo is empty.
# Does it make sense for this to ever happen? If not, fix it.
# If so, need to provide an if-else error catch both in the creation of sub.phylo,
# and of sub.clade.phylo inside the clade loop. (Sim 3, t = 156 bonks at that point)
# NOTE: code runs for sim==5 currently as a test case
sub.species2 = sub.species[!sub.species %in% extinct.species]
tips.to.drop = as.character(phylo.out$tip.label[!phylo.out$tip.label %in% sub.species2]);
# check to see if there are at least min.num.spp species for continuing with the analysis; if not store the skipped timeslice
if ( (length(phylo.out$tip.label) - length(tips.to.drop)) < min.num.spp) {
skipped.times = paste(skipped.times, t) # keep track of the timeslices that were skipped in a text string
} else {
sub.phylo = drop.tip(phylo.out,tips.to.drop);
temp.root.time = max(dist.nodes(sub.phylo)[1:Ntip(sub.phylo),Ntip(sub.phylo) + 1]); temp.root.time;
most.recent.spp = sub.phylo$tip.label[as.numeric(names(which.max(dist.nodes(sub.phylo)[1:Ntip(sub.phylo),Ntip(sub.phylo) + 1])))]; most.recent.spp;
extinct.time.most.recent = unique(all.populations$time.of.sp.extinction[all.populations$spp.name==most.recent.spp]); extinct.time.most.recent;
sub.phylo$root.time = temp.root.time + max(c(0,max.time.actual - extinct.time.most.recent)); sub.phylo$root.time;
sub.phylo = collapse.singles(timeSliceTree(sub.phylo,sliceTime=(max.time.actual - t),plot=F,drop.extinct = T));
num.of.spp = length(sub.phylo$tip.label);
for (c in (num.of.spp+1):max(sub.phylo$edge)) {
#pull out list of species names belonging to each subclade
sub.clade = clade.members(c, sub.phylo, tip.labels=T)
subset.populations = subset(all.populations, spp.name %in% as.numeric(sub.clade));
#sub.populations is the subset of populations specific to a particular clade and timeslice
sub.populations = subset(subset.populations, time.of.origin <= t & time.of.extinction > t)
#sub.clade.phylo is a specific simulation clade pulled from the phylogeny that was sliced at timeslice t
tips.to.drop2 = as.character(sub.phylo$tip.label[which(is.element(sub.phylo$tip.label,as.character(sub.populations$spp.name))==F)]);
# check to see if there are at least min.num.spp species for continuing with the analysis; if not increment skipped.clades
if((length(sub.phylo$tip.label) - length(tips.to.drop2)) < min.num.spp) {
skipped.clades = skipped.clades + 1
} else {
sub.clade.phylo = drop.tip(sub.phylo,tips.to.drop2);
sub.clade.phylo$root.time = max(dist.nodes(sub.clade.phylo)[1:Ntip(sub.clade.phylo),Ntip(sub.clade.phylo) + 1]); sub.clade.phylo$root.time;
sub.clade.phylo$origin.time = t - sub.clade.phylo$root.time; sub.clade.phylo$origin.time;
if (identical(sort(as.integer(unique(sub.populations$spp.name))) , sort(as.integer(sub.clade.phylo$tip.label)))==F ) {print(c(c,t,'Error: trimmed phylogeny does not contain the correct species')); break} else{};
reg.summary = regional.calc(sub.populations[,c('region','spp.name','time.of.origin','reg.env','extant')], sub.clade.phylo, as.integer(t));
#Note that extinction calculation must be done on subset.populations, not sub.populations
extinction = extinct.calc(subset.populations, timeslice=t)
reg.summary2 = merge(reg.summary,extinction[,c('region','extinction.rate')],by='region')
corr.results = xregion.analysis(reg.summary2)
#Pybus & Harvey (2000)'s gamma statistic
Gamma.stat = gammaStat(sub.clade.phylo)
#Calculate Blomberg's K for two traits: environmental optimum, and mean region of occurrence
spp.traits = aggregate(sub.populations$region, by = list(sub.populations$spp.name, sub.populations$env.opt),
function(x) mean(x, na.rm=T))
names(spp.traits) = c('spp.name','env.opt','region')
spp.env = spp.traits$env.opt
names(spp.env) = spp.traits$spp.name
BK.env = phylosig(sub.clade.phylo, spp.env[sub.clade.phylo$tip.label], method="K")
spp.reg = spp.traits$region
names(spp.reg) = spp.traits$spp.name
BK.reg = phylosig(sub.clade.phylo, spp.reg[sub.clade.phylo$tip.label], method="K")
output = rbind(output, cbind(sim=sim,clade.id = c, time = t, corr.results, gamma.stat = Gamma.stat,
clade.richness = length(unique(sub.populations$spp.name)),
BK.env = BK.env , BK.reg = BK.reg))
print(paste(sim,c,t,date(),length(sub.clade.phylo$tip.label),sep="   "));
} # end third else
} # end sub clade for loop
} # end second else
}; # end timeslice loop
if (num.of.time.slices > 1) {write.csv(output,paste(analysis_dir,"/SENC_Stats_sim",sim,"_mult_times.csv",sep=""),quote=F,row.names=F)};
