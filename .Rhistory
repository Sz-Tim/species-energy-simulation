nonNEPsp = as.character(sebastes[is.na(sebastes$min_latitude), 'X'])
NEPphy = drop.tip(phy,nonNEPsp)
# Simulation data
Ttrop = read.csv(paste(sim_dir,'/SENC_Stats_T.sims.trop.csv',sep=''), header=T)
Ktrop = read.csv(paste(sim_dir,'/SENC_Stats_K.sims.trop.csv',sep=''), header=T)
Ktrop.slice = read.csv(paste(sim_dir,'/SENC_Stats_K.slice.sims.trop.csv',sep=''), header=T)
Ttemp = read.csv(paste(sim_dir,'/SENC_Stats_T.sims.temp.csv',sep=''), header=T)
Ktemp = read.csv(paste(sim_dir,'/SENC_Stats_K.sims.temp.csv',sep=''), header=T)
Ktemp.slice = read.csv(paste(sim_dir,'/SENC_Stats_K.slice.sims.temp.csv',sep=''), header=T)
Dcol = 'gold2'
Tcol = 'olivedrab3'
Kcol = 'mediumorchid2'
Kcol.slice = 'gold2'
Dline = 'goldenrod3'
Tline = 'darkgreen'
Kline = 'mediumorchid4'
Kline.slice = 'goldenrod3'
pdf(paste(analysis_dir,'/summaryplots/3scenarios_gamma_sim_and_empirical_',Sys.Date(),'.pdf',sep=''), height = 15, width = 7)
par(mfrow=c(3,1), mar = c(6.5,8,2,1), mgp = c(5.5, 1.5, 0), oma = c(1, 5, 1, 1))
#cexaxis = 2
cexpt = 2
cexlab = 3
cexaxis = 2.25
cexlegend = 2.5
cexabc = 2.5
cexmain = 2.5
plot(log10(Ttrop$clade.rich), Ttrop$gamma.stat, xlim = c(0.9,4), ylim = c(-20,5), pch=16, col=Tcol,
xlab=expression(paste(plain(log)[10]," Clade Richness")), ylab = "Gamma", las = 1,
xaxt="n", main='', cex = cexpt, cex.lab = cexlab, cex.axis = cexaxis, cex.main = cexmain)
axis(1,1:4, cex.axis=cexaxis)
points(log10(Ktrop$clade.rich), Ktrop$gamma.stat, pch=17, col=Kcol, cex = cexpt)
points(log10(Ktrop.slice$clade.rich), Ktrop.slice$gamma.stat, pch = 15, col = Kcol.slice, cex = cexpt)
#splines
points(smooth.spline(log10(Ktrop.slice$clade.rich),Ktrop.slice$gamma.stat,df=5),type='l',col= Kline.slice,lwd=4)
points(smooth.spline(log10(Ttrop$clade.rich),Ttrop$gamma.stat,df=5),type='l',col= Tline,lwd=4)
points(smooth.spline(log10(Ktrop$clade.rich),Ktrop$gamma.stat,df=5),type='l',col= Kline,lwd=4)
legend('bottomleft',c('Energy gradient','No zero sum','Pre-equilibrium'),
pch = c(17,16,15), col = c(Kcol, Tcol, Kcol.slice), bty = "n", cex = cexlegend)
mtext("(a)", 2, at = 1, cex = cexabc, outer = T, las = 1, line = .5)
#Insets with cartoon phylogenies
posgamma = read.tree(paste(repo_dir,'/posgamma.tre',sep=''))
neggamma = read.tree(paste(repo_dir,'/neggamma.tre',sep=''))
par(new = T, fig = c(.65,1,.85,.99))
plot(posgamma, edge.width=3)
par(new = T, fig = c(.65,1,.68,.82))
plot(neggamma, edge.width=3)
par(new=T)
par(fig = c(0, 1, 0.33, .67))
plot(log10(Ttemp$clade.rich), Ttemp$gamma.stat, ylim = c(-20,5), xlim = c(0.9,4), pch=16, col= Tcol,
xlab=expression(paste(plain(log)[10]," Clade Richness")), ylab = "Gamma", las = 1, xaxt = "n",
main='', cex = cexpt, cex.lab = cexlab, cex.axis = cexaxis, cex.main = cexmain)
axis(1, 1:4, cex.axis = cexaxis)
points(log10(Ktemp$clade.rich), Ktemp$gamma.stat, pch = 17, col = Kcol, cex = cexpt)
points(log10(Ktemp.slice$clade.rich), Ktemp.slice$gamma.stat, pch = 15, col = Kcol.slice, cex = cexpt)
#splines
points(smooth.spline(log10(Ktemp.slice$clade.rich), Ktemp.slice$gamma.stat, df = 5), type = 'l', col = Kline.slice, lwd=4)
points(smooth.spline(log10(Ttemp$clade.rich), Ttemp$gamma.stat, df = 5), type = 'l', col = Tline, lwd=4)
points(smooth.spline(log10(Ktemp$clade.rich), Ktemp$gamma.stat, df = 5), type = 'l', col = Kline, lwd=4)
mtext("(b)", 2, at = 0.67, cex = cexabc, outer = T, las = 1, line = .5)
#Empirical data
#Sebastes phylogeny has 99 species (only 66 in NEP), so pull out clades for each scenario of roughly the same size
rich=66
Ttrop99 = subset(Ttrop, clade.richness > .9*rich & clade.richness < 1.1*rich)
Ktrop99 = subset(Ktrop, clade.richness > .9*rich & clade.richness < 1.1*rich)
Ktrop.slice99 = subset(Ktrop.slice, clade.richness > .9*rich & clade.richness < 1.1*rich)
Ktemp99 = subset(Ktemp, clade.richness > .9*rich & clade.richness < 1.1*rich)
Ktemp.slice99 = subset(Ktemp.slice, clade.richness > .9*rich & clade.richness < 1.1*rich)
par(new=T)
par(fig = c(0, 1, 0, 0.33))
plot(density(Ttrop99$gamma.stat), col=Tcol, main="", xlab="Gamma", lwd=5, las=1,
xlim = c(-8,2), cex.lab = cexlab, cex.axis = cexaxis)
points(density(Ktrop99$gamma.stat), type='l',col=Kcol, lty='dashed',lwd=5)
points(density(Ktemp99$gamma.stat), type='l',col=Kcol, lwd=5)
points(density(Ktrop.slice99$gamma.stat), type= 'l', col=Kcol.slice, lty='dashed', lwd=5)
points(density(Ktemp.slice99$gamma.stat), type = 'l', col=Kcol.slice, lwd=5)
abline(v = gammaStat(NEPphy), lwd=3)
legend("topleft",c('tropical', 'temperate'),
col = 'gray50', lty = c('dashed', 'solid'), lwd=4, bty = "n", cex = cexlegend)
mtext("(c)", 2, at = 0.33, cex = cexabc, outer = T, las = 1, line = .5)
dev.off()
# Plot phylogenetic gamma statistic as a function of clade richness for the 3 different scenarios
# Energy Gradient, no zero-sum, and Energy Gradient pre-equilibrium
# a) tropical origin, b) temperate origin, c) comparison of simulation data to gamma for
# Sebastes rockfish phylogeny
require(ape)
Allen = 0;
if (Allen ==1) {
sim_dir = "C:/SENCoutput/senc_reps_analysis"
analysis_dir = "//bioark.bio.unc.edu/hurlbertallen/manuscripts/cladevscommunity/analyses/"
repo_dir = "C:/Documents and Settings/Hurlbert/species-energy-simulation"
}
if (Allen == 0) {
sim_dir = "C:/Users/steg815/Desktop/Stegen_PNNL/Spp-Energy-Niche-Conserv/sims.out.130204"
analysis_dir = "C:/Users/steg815/Desktop/Stegen_PNNL/Spp-Energy-Niche-Conserv/sims.out.130204"
repo_dir = "C:/Users/steg815/Desktop/Stegen_PNNL/Spp-Energy-Niche-Conserv/species-energy-simulation"
}
# Empirical data for Sebastes
phy = read.tree(paste(repo_dir,'/Sebastes_tree_Ingram2011PRSB.phy',sep=''))
sebastes = read.csv(paste(repo_dir,'/sebastes_data_for_allen.csv',sep=''),header=T)
#Drop non-NEP species (with no latitude data)
nonNEPsp = as.character(sebastes[is.na(sebastes$min_latitude), 'X'])
NEPphy = drop.tip(phy,nonNEPsp)
# Simulation data
Ttrop = read.csv(paste(sim_dir,'/SENC_Stats_T.sims.trop.csv',sep=''), header=T)
Ktrop = read.csv(paste(sim_dir,'/SENC_Stats_K.sims.trop.csv',sep=''), header=T)
Ktrop.slice = read.csv(paste(sim_dir,'/SENC_Stats_K.slice.sims.trop.csv',sep=''), header=T)
Ttemp = read.csv(paste(sim_dir,'/SENC_Stats_T.sims.temp.csv',sep=''), header=T)
Ktemp = read.csv(paste(sim_dir,'/SENC_Stats_K.sims.temp.csv',sep=''), header=T)
Ktemp.slice = read.csv(paste(sim_dir,'/SENC_Stats_K.slice.sims.temp.csv',sep=''), header=T)
Dcol = 'gold2'
Tcol = 'olivedrab3'
Kcol = 'mediumorchid2'
Kcol.slice = 'gold2'
Dline = 'goldenrod3'
Tline = 'darkgreen'
Kline = 'mediumorchid4'
Kline.slice = 'goldenrod3'
#cexaxis = 2
cexpt = 2
cexlab = 3
cexaxis = 2.25
cexlegend = 2.5
cexabc = 2.5
cexmain = 2.5
#Empirical data
#Sebastes phylogeny has 99 species (only 66 in NEP), so pull out clades for each scenario of roughly the same size
rich=66
Ttrop99 = subset(Ttrop, clade.richness > .9*rich & clade.richness < 1.1*rich)
Ktrop99 = subset(Ktrop, clade.richness > .9*rich & clade.richness < 1.1*rich)
Ktrop.slice99 = subset(Ktrop.slice, clade.richness > .9*rich & clade.richness < 1.1*rich)
Ktemp99 = subset(Ktemp, clade.richness > .9*rich & clade.richness < 1.1*rich)
Ktemp.slice99 = subset(Ktemp.slice, clade.richness > .9*rich & clade.richness < 1.1*rich)
par(new=T)
par(fig = c(0, 1, 0, 0.33))
plot(density(Ttrop99$gamma.stat), col=Tcol, main="", xlab="Gamma", lwd=5, las=1,
xlim = c(-8,2), cex.lab = cexlab, cex.axis = cexaxis)
points(density(Ktrop99$gamma.stat), type='l',col=Kcol, lty='dashed',lwd=5)
points(density(Ktemp99$gamma.stat), type='l',col=Kcol, lwd=5)
points(density(Ktrop.slice99$gamma.stat), type= 'l', col=Kcol.slice, lty='dashed', lwd=5)
points(density(Ktemp.slice99$gamma.stat), type = 'l', col=Kcol.slice, lwd=5)
abline(v = gammaStat(NEPphy), lwd=3)
legend("topleft",c('tropical', 'temperate'),
col = 'gray50', lty = c('dashed', 'solid'), lwd=4, bty = "n", cex = cexlegend)
mtext("(c)", 2, at = 0.33, cex = cexabc, outer = T, las = 1, line = .5)
plot(density(Ttrop99$gamma.stat), col=Tcol, main="", xlab="Gamma", lwd=5, las=1,
xlim = c(-8,2), cex.lab = cexlab, cex.axis = cexaxis)
dev.off()
plot(density(Ttrop99$gamma.stat), col=Tcol, main="", xlab="Gamma", lwd=5, las=1,
xlim = c(-8,2), cex.lab = cexlab, cex.axis = cexaxis)
points(density(Ktrop99$gamma.stat), type='l',col=Kcol, lty='dashed',lwd=5)
points(density(Ktemp99$gamma.stat), type='l',col=Kcol, lwd=5)
points(density(Ktrop.slice99$gamma.stat), type= 'l', col=Kcol.slice, lty='dashed', lwd=5)
points(density(Ktemp.slice99$gamma.stat), type = 'l', col=Kcol.slice, lwd=5)
abline(v = gammaStat(NEPphy), lwd=3)
legend("topleft",c('tropical', 'temperate'),
col = 'gray50', lty = c('dashed', 'solid'), lwd=4, bty = "n", cex = cexlegend)
mtext("(c)", 2, at = 0.33, cex = cexabc, outer = T, las = 1, line = .5)
pdf(paste(analysis_dir,'/summaryplots/Pauling_gamma_sim_and_empirical_',Sys.Date(),'.pdf',sep='')); par(pty='s');
plot(density(Ttrop99$gamma.stat), col=Tcol, main="", xlab="Gamma", lwd=5, las=1,
xlim = c(-8,2), cex.lab = cexlab, cex.axis = cexaxis)
points(density(Ktrop99$gamma.stat), type='l',col=Kcol, lty='dashed',lwd=5)
points(density(Ktemp99$gamma.stat), type='l',col=Kcol, lwd=5)
points(density(Ktrop.slice99$gamma.stat), type= 'l', col=Kcol.slice, lty='dashed', lwd=5)
points(density(Ktemp.slice99$gamma.stat), type = 'l', col=Kcol.slice, lwd=5)
abline(v = gammaStat(NEPphy), lwd=3)
legend("topleft",c('tropical', 'temperate'),
col = 'gray50', lty = c('dashed', 'solid'), lwd=4, bty = "n", cex = cexlegend)
mtext("(c)", 2, at = 0.33, cex = cexabc, outer = T, las = 1, line = .5)
dev.off()
# Plot boxplots of gamma (phylogenetic tree shape statistic) across 3 scenarios
# (K gradient, disturbance gradient, or no limit) and 2 regions of origin.
Allen = 0;
if (Allen ==1) {
sim_dir = "C:/SENCoutput/senc_reps_analysis"
analysis_dir = "//bioark.bio.unc.edu/hurlbertallen/manuscripts/cladevscommunity/analyses"
repo_dir = "C:/Documents and Settings/Hurlbert/species-energy-simulation"
}
if (Allen == 0) {
sim_dir = "C:/Users/steg815/Desktop/Stegen_PNNL/Spp-Energy-Niche-Conserv/sims.out.130204"
analysis_dir = "C:/Users/steg815/Desktop/Stegen_PNNL/Spp-Energy-Niche-Conserv/sims.out.130204"
repo_dir = "C:/Users/steg815/Desktop/Stegen_PNNL/Spp-Energy-Niche-Conserv/species-energy-simulation"
}
# Sebastes data
# MRD-PSV-Richness analyses
phy = read.tree(paste(repo_dir,'/Sebastes_tree_Ingram2011PRSB.phy',sep=''))
sebastes = read.csv(paste(repo_dir,'/sebastes_data_for_allen.csv',sep=''),header=T)
#Drop non-NEP species (with no latitude data)
nonNEPsp = as.character(sebastes[is.na(sebastes$min_latitude), 'X'])
NEPphy = drop.tip(phy,nonNEPsp)
richness = sapply(lat, function(x) nrow(subset(sebastes, min_latitude <= x & max_latitude >= x)))
phylo.bl1 <- compute.brlen(NEPphy, 1)
all.dist <- dist.nodes(phylo.bl1)
root.dist <- all.dist[length(NEPphy$tip.label)+1, 1:length(NEPphy$tip.label)]
tips.to.root <- data.frame(spp.name=NEPphy$tip.label,root.dist)
output = c()
for (i in lat) {
species = subset(sebastes, min_latitude <= i & max_latitude >= i, select='X')
#MRD
MRD.ini <- merge(species, tips.to.root, by.x="X", by.y="spp.name",sort = FALSE)
MRD <- mean(MRD.ini$root.dist)
#PSV
Vmatrix = vcv(NEPphy, corr=F)
psvs = matrix(NA, ncol=2)
index = row.names(Vmatrix) %in% species$X
v.matrix = Vmatrix[index,index]
n = nrow(v.matrix)
psv = (n*sum(diag(v.matrix)) - sum(v.matrix))/(sum(diag(v.matrix))*(n-1))
output = rbind(output, c(i, MRD, psv))
}
output2 = data.frame(cbind(output, richness))
names(output2) = c('lat','MRD','PSV','S')
# For Energy Gradient temperate origin,
#   MRD-S correlation predicted to be positive
#   PSV-S correlation predicted to be negative
cor(output2)
#restricting analysis to north of Point Conception
output3 = output2[output2$lat >= 34,]
cor(output3)
# Simulation data analysis
which.sims = c(3465:4064); length(which.sims);
#rootclade.stats = compile.firstlines(sim_dir,"SENC_Stats_sim")
simstats = read.csv(paste(analysis_dir,"/rootclade_stats_sims2925-4064.csv",sep=""), header=T);
simstats$timeslice = 'no';
slicestats = read.csv(paste(analysis_dir,"/rootclade_slice_stats_sims3665-3861.csv",sep=""), header=T);
slicestats$timeslice = 'yes';
simstats = rbind(simstats,slicestats);
sim.matrix = read.csv(paste(repo_dir,'/SENC_Master_Simulation_Matrix.csv',sep=""),header=T)
simstats2 = merge(simstats, sim.matrix[,c(1,3:10,15,16)],by.x='sim',by.y='sim.id',all.x=T)
simstats3 = subset(simstats2, sim %in% which.sims)
simstats3$scenario = NA
simstats3$scenario[simstats3$carry.cap=="on" & simstats3$energy.gradient=="on" & simstats3$timeslice=="no"] = "1 energy gradient"
simstats3$scenario[simstats3$carry.cap=="off" & simstats3$energy.gradient=="off" & simstats3$timeslice=="no"] = "2 no zero sum"
simstats3$scenario[simstats3$carry.cap=="on" & simstats3$energy.gradient=="on" & simstats3$timeslice=="yes"] = "3 pre-equilibrium"
simstats3$reg.of.origin = as.character(simstats3$reg.of.origin)
tropical.shade = 'red'
temperate.shade = 'blue'
boxplot.cols = c(rep(temperate.shade,3),rep(tropical.shade,3))
pdf(paste(analysis_dir,'/summaryplots/3scenarios_MRDPSV_',Sys.Date(),'.pdf',sep=''),height=6,width=8)
par(mfrow=c(2,1), mar=c(1,5,1,1), oma=c(5,1,1,1), las=1)
boxplot(simstats3$r.MRD.rich ~ simstats3$scenario + simstats3$reg.of.origin,
ylab=expression(italic(r)[MRD-richness]), xaxt="n",
col = boxplot.cols, border = boxplot.cols, lwd=1,cex.axis=0.8, cex.lab = 1.5)
rect(0, 0, 7, 1.1, col = rgb(.6,.6,.6,.1), border = NA)
abline(h = cor(output2$MRD, output2$S), lwd = 2) #entire gradient
abline(h = cor(output3$MRD, output3$S), lwd = 2, lty = 'dashed') #north of 34N
mtext("(a)", 2, at = 1.2, las = 1, line = 3, cex = 2)
boxplot(simstats3$r.PSV.rich ~ simstats3$scenario + simstats3$reg.of.origin,
ylab=expression(italic(r)[PSV-richness]), xaxt="n",
col = boxplot.cols, border = boxplot.cols,lwd=1,cex.axis=0.8, cex.lab=1.5)
rect(0, 0, 7, 1.1, col = rgb(.5,.5,.5,.1), border = NA)
abline(h = cor(output2$PSV, output2$S), lwd = 2) #entire gradient
abline(h = cor(output3$PSV, output3$S), lwd = 2, lty = 'dashed') #north of 34N
mtext("(b)", 2, at = 1.2, line = 3, las = 1, cex = 2)
axis(1, at = 1:6, labels = F)
mtext(rep(c('Energy','No zero','Pre-'),2), 1, at = 1:6, line = 1)
mtext(rep(c('gradient','sum','equilibrium'),2), 1, at = 1:6, line = 2)
mtext("Temperate Origin", side = 1, adj = 0.3, cex = 1.25, line = 3, outer = T)
mtext("Tropical Origin", side = 1, adj = 0.8, cex = 1.25, line = 3, outer = T)
#legend("bottom",c("Entire gradient","North of 34N"), lty = c('solid','dashed'))
dev.off()
library(ape);
# Sebastes data
# MRD-PSV-Richness analyses
phy = read.tree(paste(repo_dir,'/Sebastes_tree_Ingram2011PRSB.phy',sep=''))
# Plot boxplots of gamma (phylogenetic tree shape statistic) across 3 scenarios
# (K gradient, disturbance gradient, or no limit) and 2 regions of origin.
Allen = 0;
if (Allen ==1) {
sim_dir = "C:/SENCoutput/senc_reps_analysis"
analysis_dir = "//bioark.bio.unc.edu/hurlbertallen/manuscripts/cladevscommunity/analyses"
repo_dir = "C:/Documents and Settings/Hurlbert/species-energy-simulation"
}
if (Allen == 0) {
sim_dir = "C:/Users/steg815/Desktop/Stegen_PNNL/Spp-Energy-Niche-Conserv/sims.out.130204"
analysis_dir = "C:/Users/steg815/Desktop/Stegen_PNNL/Spp-Energy-Niche-Conserv/sims.out.130204"
repo_dir = "C:/Users/steg815/Desktop/Stegen_PNNL/Spp-Energy-Niche-Conserv/species-energy-simulation"
}
library(ape);
# Sebastes data
# MRD-PSV-Richness analyses
phy = read.tree(paste(repo_dir,'/Sebastes_tree_Ingram2011PRSB.phy',sep=''))
sebastes = read.csv(paste(repo_dir,'/sebastes_data_for_allen.csv',sep=''),header=T)
#Drop non-NEP species (with no latitude data)
nonNEPsp = as.character(sebastes[is.na(sebastes$min_latitude), 'X'])
NEPphy = drop.tip(phy,nonNEPsp)
richness = sapply(lat, function(x) nrow(subset(sebastes, min_latitude <= x & max_latitude >= x)))
phylo.bl1 <- compute.brlen(NEPphy, 1)
all.dist <- dist.nodes(phylo.bl1)
root.dist <- all.dist[length(NEPphy$tip.label)+1, 1:length(NEPphy$tip.label)]
tips.to.root <- data.frame(spp.name=NEPphy$tip.label,root.dist)
output = c()
for (i in lat) {
species = subset(sebastes, min_latitude <= i & max_latitude >= i, select='X')
#MRD
MRD.ini <- merge(species, tips.to.root, by.x="X", by.y="spp.name",sort = FALSE)
MRD <- mean(MRD.ini$root.dist)
#PSV
Vmatrix = vcv(NEPphy, corr=F)
psvs = matrix(NA, ncol=2)
index = row.names(Vmatrix) %in% species$X
v.matrix = Vmatrix[index,index]
n = nrow(v.matrix)
psv = (n*sum(diag(v.matrix)) - sum(v.matrix))/(sum(diag(v.matrix))*(n-1))
output = rbind(output, c(i, MRD, psv))
}
output2 = data.frame(cbind(output, richness))
names(output2) = c('lat','MRD','PSV','S')
# For Energy Gradient temperate origin,
#   MRD-S correlation predicted to be positive
#   PSV-S correlation predicted to be negative
cor(output2)
#restricting analysis to north of Point Conception
output3 = output2[output2$lat >= 34,]
cor(output3)
# Simulation data analysis
which.sims = c(3465:4064); length(which.sims);
#rootclade.stats = compile.firstlines(sim_dir,"SENC_Stats_sim")
simstats = read.csv(paste(analysis_dir,"/rootclade_stats_sims2925-4064.csv",sep=""), header=T);
simstats$timeslice = 'no';
slicestats = read.csv(paste(analysis_dir,"/rootclade_slice_stats_sims3665-3861.csv",sep=""), header=T);
slicestats$timeslice = 'yes';
simstats = rbind(simstats,slicestats);
sim.matrix = read.csv(paste(repo_dir,'/SENC_Master_Simulation_Matrix.csv',sep=""),header=T)
simstats2 = merge(simstats, sim.matrix[,c(1,3:10,15,16)],by.x='sim',by.y='sim.id',all.x=T)
simstats3 = subset(simstats2, sim %in% which.sims)
simstats3$scenario = NA
simstats3$scenario[simstats3$carry.cap=="on" & simstats3$energy.gradient=="on" & simstats3$timeslice=="no"] = "1 energy gradient"
simstats3$scenario[simstats3$carry.cap=="off" & simstats3$energy.gradient=="off" & simstats3$timeslice=="no"] = "2 no zero sum"
simstats3$scenario[simstats3$carry.cap=="on" & simstats3$energy.gradient=="on" & simstats3$timeslice=="yes"] = "3 pre-equilibrium"
simstats3$reg.of.origin = as.character(simstats3$reg.of.origin)
tropical.shade = 'red'
temperate.shade = 'blue'
boxplot.cols = c(rep(temperate.shade,3),rep(tropical.shade,3))
pdf(paste(analysis_dir,'/summaryplots/3scenarios_MRDPSV_',Sys.Date(),'.pdf',sep=''),height=6,width=8)
par(mfrow=c(2,1), mar=c(1,5,1,1), oma=c(5,1,1,1), las=1)
boxplot(simstats3$r.MRD.rich ~ simstats3$scenario + simstats3$reg.of.origin,
ylab=expression(italic(r)[MRD-richness]), xaxt="n",
col = boxplot.cols, border = boxplot.cols, lwd=1,cex.axis=0.8, cex.lab = 1.5)
rect(0, 0, 7, 1.1, col = rgb(.6,.6,.6,.1), border = NA)
abline(h = cor(output2$MRD, output2$S), lwd = 2) #entire gradient
abline(h = cor(output3$MRD, output3$S), lwd = 2, lty = 'dashed') #north of 34N
mtext("(a)", 2, at = 1.2, las = 1, line = 3, cex = 2)
boxplot(simstats3$r.PSV.rich ~ simstats3$scenario + simstats3$reg.of.origin,
ylab=expression(italic(r)[PSV-richness]), xaxt="n",
col = boxplot.cols, border = boxplot.cols,lwd=1,cex.axis=0.8, cex.lab=1.5)
rect(0, 0, 7, 1.1, col = rgb(.5,.5,.5,.1), border = NA)
abline(h = cor(output2$PSV, output2$S), lwd = 2) #entire gradient
abline(h = cor(output3$PSV, output3$S), lwd = 2, lty = 'dashed') #north of 34N
mtext("(b)", 2, at = 1.2, line = 3, las = 1, cex = 2)
axis(1, at = 1:6, labels = F)
mtext(rep(c('Energy','No zero','Pre-'),2), 1, at = 1:6, line = 1)
mtext(rep(c('gradient','sum','equilibrium'),2), 1, at = 1:6, line = 2)
mtext("Temperate Origin", side = 1, adj = 0.3, cex = 1.25, line = 3, outer = T)
mtext("Tropical Origin", side = 1, adj = 0.8, cex = 1.25, line = 3, outer = T)
#legend("bottom",c("Entire gradient","North of 34N"), lty = c('solid','dashed'))
dev.off()
head(sebastes)
richness = sapply(lat, function(x) nrow(subset(sebastes, min_latitude <= x & max_latitude >= x)))
richness = sapply(sebastes, function(x) nrow(subset(sebastes, min_latitude <= x & max_latitude >= x)))
7108.65*12
20*0.2
100/10000
0.1/3.14
sqrt(0.03184713)
sqrt(1000)
0.3*10
0.3*33
sim_dir = "C:/Users/steg815/Desktop/Stegen_PNNL/Spp-Energy-Niche-Conserv/sims.out.130204"
Ttemp = read.csv(paste(sim_dir,'/SENC_Stats_T.sims.temp.csv',sep=''), header=T)
Ktemp = read.csv(paste(sim_dir,'/SENC_Stats_K.sims.temp.csv',sep=''), header=T)
Ktemp.slice = read.csv(paste(sim_dir,'/SENC_Stats_K.slice.sims.temp.csv',sep=''), header=T)
head(Ktemp)
unique(Ktemp$sim)
unique(Ktemp.slice$sim)
length(unique(Ktemp.slice$sim))
is.element(unique(Ktemp.slice$sim),unique(Ktemp$sim))
Ktrop = read.csv(paste(sim_dir,'/SENC_Stats_K.sims.trop.csv',sep=''), header=T)
Ktrop.slice = read.csv(paste(sim_dir,'/SENC_Stats_K.slice.sims.trop.csv',sep=''), header=T)
is.element(unique(Ktrop.slice$sim),unique(Ktemp$sim))
is.element(unique(Ktrop.slice$sim),unique(Ktrop$sim))
repo_dir = "C:/Users/steg815/Desktop/Stegen_PNNL/Spp-Energy-Niche-Conserv/species-energy-simulation"
sim.matrix = read.csv(repo_dir/"SENC_Master_Simulation_Matrix.csv"); head(sim.matrix)
sim.matrix = read.csv(paste(repo_dir,"/SENC_Master_Simulation_Matrix.csv",sep="")); head(sim.matrix)
sim.matrix$reg.of.origin[unique(Ktrop.slice$sim) %in% sim.matrix$sim.id]
sim.matrix$reg.of.origin[sim.matrix$sim.id %in% unique(Ktrop.slice$sim)]
sim.matrix$reg.of.origin[sim.matrix$sim.id %in% unique(Ktrop$sim)]
sim.matrix$reg.of.origin[sim.matrix$sim.id %in% unique(Ktemp$sim)]
sim.matrix$reg.of.origin[sim.matrix$sim.id %in% unique(Ktemp.slice$sim)]
sim.matrix$reg.of.origin[sim.matrix$sim.id %in% unique(Ttemp$sim)]
12*11
7500-399
7500-399-1245.16
7500-399-1245.16-5
7916.67*12
7.5/2.54
3.5/2.54
10 / 2.54
1/2.54
197.19 / 1000 * 5
197.19 / 1000 * 5 * 0.05
197.19 / 1000 * 5 * 0.05 * 1000
375 + 0.05
375 + 375*0.05
400 * 50
400 * 30
1300*7/60
1300*7/60/60
set.seed(123)
x <- sort(runif(200))
y <- sin(3*pi*x) + rnorm(200, sd=0.1)
smspl <- smooth.spline(x, y)
d2 <- function(x) predict(smspl, x , deriv=2)$y
x <- seq(0, 1, length=500)
plot(x, d2(x), type="l")
abline(h=0, lty=2)
uniroot(f=d2, interval=c(0.1, 0.5))  # first inflection point
uniroot(f=d2, interval=c(0.5, 0.9))  # second inflection point
## code for relating various metrics of the root clade to time and making plots
drop.extinct.tips = function(phy){
tol<-1e-6
temp<-diag(vcv(phy))
pruned.phy<-drop.tip(phy,names(temp[temp<(max(temp)-tol)]))
return(pruned.phy)
}
Allen = 0;
partial.analysis = 1; # toggle to determine whether we're looking at all sims or just some
#New parameter for taking into account which of us is running this code
if(Allen==1) {
setwd('c:/documents and settings/hurlbert/species-energy-simulation')
Rlib.location = "C:/program files/R/R-2.15.2/library"
sim_dir = "C:/SENCoutput"
analysis_dir = "//bioark.bio.unc.edu/hurlbertallen/manuscripts/cladevscommunity/analyses"
} else {
setwd('C:/Users/steg815/Desktop/Stegen_PNNL/Spp-Energy-Niche-Conserv/species-energy-simulation')
sim_dir = "C:/Users/steg815/Desktop/Stegen_PNNL/Spp-Energy-Niche-Conserv/sims.out.130204" #wherever all of your zipped output files are
analysis_dir = "C:/Users/steg815/Desktop/Stegen_PNNL/Spp-Energy-Niche-Conserv/sims.out.130204" #wherever you want to store the results of these analyses
}
which.sims = c(4065,4075);
sim.matrix = as.data.frame(read.csv("SENC_Master_Simulation_Matrix.csv",header=T));
metrics = array(-999,c(length(which.sims),100,27));
i=1
metrics = array(-999,c(length(which.sims),100,27));
for (i in 1:length(which.sims)) {
sim = which.sims[i];
temp.metrics = read.csv(paste(sim_dir,"/SENC_Stats_sim",sim,"_mult_times.csv",sep=""),header=T);
metrics[i,,] = as.matrix(temp.metrics);
metrics = array(metrics,dim=dim(metrics),dimnames = list(NULL,NULL,colnames(temp.metrics)));
rm('temp.metrics');
}
curr.metric = 'global.richness'
plot(metrics[1,,curr.metric] ~ metrics[1,,'time'],xlim=c(0,max(metrics[,,'time'])),ylim=range(metrics[,,curr.metric]),ylab=curr.metric,xlab='Time',typ='n');
plot(metrics[1,,curr.metric] ~ metrics[1,,'time'],xlim=c(0,max(metrics[,,'time'])),ylim=range(metrics[,,curr.metric]),ylab=curr.metric,xlab='Time',typ='p');
smooth.spline(metrics[1,,'time'],metrics[1,,curr.metric])
foo = smooth.spline(metrics[1,,'time'],metrics[1,,curr.metric])
x = seq(0, 100000, length=1000)
smspl = smooth.spline(metrics[1,,'time'],metrics[1,,curr.metric])
x = seq(0, 100000, length=1000)
plot(x, d2(x), type="l")
smspl = smooth.spline(metrics[1,,'time'],metrics[1,,curr.metric])
set.seed(123)
x <- sort(runif(200))
y <- sin(3*pi*x) + rnorm(200, sd=0.1)
plot(x,y)
smspl <- smooth.spline(x, y)
plot(smspl)
d2 <- function(x) predict(smspl, x , deriv=2)$y
x <- seq(0, 1, length=500)
plot(x, d2(x), type="l")
d1 <- function(x) predict(smspl, x , deriv=2)$y
x <- seq(0, 1, length=500)
plot(x, d1(x), type="l")
d1 <- function(x) predict(smspl, x , deriv=1)$y
x <- seq(0, 1, length=500)
plot(x, d1(x), type="l")
plot(smspl)
smspl = smooth.spline(metrics[1,,'time'],metrics[1,,curr.metric])
plot(smspl)
x = seq(0, 100000, length=1000)
plot(x, d1(x), type="l")
x = seq(0, 100000, length=500)
plot(x, d1(x), type="l")
x = seq(0, 100000, length=50)
plot(x, d1(x), type="l")
x = seq(0, 100000, length=5000)
plot(x, d1(x), type="l")
plot(smspl)
?smooth.spline
smspl = smooth.spline(metrics[1,,'time'],metrics[1,,curr.metric],spar=0.5); plot(smspl)
smspl = smooth.spline(metrics[1,,'time'],metrics[1,,curr.metric],spar=0.1); plot(smspl)
smspl = smooth.spline(metrics[1,,'time'],metrics[1,,curr.metric],spar=0.9); plot(smspl)
smspl = smooth.spline(metrics[1,,'time'],metrics[1,,curr.metric],spar=0.5); plot(smspl)
smspl = smooth.spline(metrics[1,,'time'],metrics[1,,curr.metric],spar=0.4); plot(smspl)
smspl = smooth.spline(metrics[1,,'time'],metrics[1,,curr.metric],spar=0.3); plot(smspl)
smspl = smooth.spline(metrics[1,,'time'],metrics[1,,curr.metric],spar=0.6); plot(smspl)
smspl = smooth.spline(metrics[1,,'time'],metrics[1,,curr.metric],spar=0.7); plot(smspl)
smspl = smooth.spline(metrics[1,,'time'],metrics[1,,curr.metric],spar=0.8); plot(smspl)
smspl = smooth.spline(metrics[1,,'time'],metrics[1,,curr.metric],spar=0.6); plot(smspl)
smspl = smooth.spline(metrics[1,,'time'],metrics[1,,curr.metric],spar=0.6); plot(smspl)
x = seq(0, 100000, length=5000)
plot(x, d1(x), type="l")
plot(x, d2(x), type="l")
uniroot(f=d2, interval=c(0,100000))
uniroot(f=d2, interval=c(1,100000))
d2
d2(x)
x = seq(0, 100000, length=100000)
plot(x, d2(x), type="l")
which.min(d2)
which.min(d2(x))
which.min(d2(x)) / 100000
which.min(d2(x)) / 30000
which.min(d2(x)) / 40000
