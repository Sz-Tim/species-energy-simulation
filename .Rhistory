temp.top[,3] = (1:(min(temp$time)/1000-1))*1000
names(temp.top) = names(temp)
temp = rbind(temp.top, temp)
}
metrics = abind(metrics, temp, along = 3)
}
return(metrics)
}
trop06.metrics = metric.abind(trop.sims.06)
trop07.metrics = metric.abind(trop.sims.07)
trop08.metrics = metric.abind(trop.sims.08)
trop09.metrics = metric.abind(trop.sims.09)
trop06.metrics.mean = data.frame(apply(trop06.metrics, 2:3, mean))
trop06.metrics.sd = data.frame(apply(trop06.metrics, 2:3, function(x) var(x)^.5))
trop07.metrics.mean = data.frame(apply(trop07.metrics, 2:3, mean))
trop07.metrics.sd = data.frame(apply(trop07.metrics, 2:3, function(x) var(x)^.5))
trop08.metrics.mean = data.frame(apply(trop08.metrics, 2:3, mean))
trop08.metrics.sd = data.frame(apply(trop08.metrics, 2:3, function(x) var(x)^.5))
pdf(paste(analysis_dir,'/metrics_thru_time_varying_specn_trop_origin',Sys.Date(),'.pdf',sep=""), height = 6, width = 8)
par(mfrow = c(2, 2), mar = c(3, 6, 1, 1), oma = c(5, 0, 0, 0), cex.lab = 2, las = 1, cex.axis = 1.3, mgp = c(4,1,0))
y.labels = c('Global richness', expression(italic(r)[latitude-richness]), expression(gamma), expression(italic(r)[MRD-richness]))
metric.names = c('global.richness','r.lat.rich', 'gamma.stat','r.MRD.rich')
for (j in 1:4) {
curr.metric = metric.names[j]
plot(trop.metrics06.mean$time/1000, trop06.metrics.mean[, curr.metric], xlim = c(0, max(trop06.metrics.mean$time/1000)),
ylim = range(c(trop06.metrics[, , curr.metric], trop09.metrics[, , curr.metric]), na.rm= T), type = "n",
ylab = y.labels[j], xlab = "")
polygon(c(trop06.metrics.mean$time/1000, rev(trop06.metrics.mean$time/1000)),
c(trop06.metrics.mean[, curr.metric] - 2*trop06.metrics.sd[, curr.metric],
rev(trop06.metrics.mean[, curr.metric] + 2*trop06.metrics.sd[, curr.metric])),
col = rgb(.8, 0, 0, .3), border = NA)
polygon(c(trop07.metrics.mean$time/1000, rev(trop07.metrics.mean$time/1000)),
c(trop07.metrics.mean[, curr.metric] - 2*trop07.metrics.sd[, curr.metric],
rev(trop07.metrics.mean[, curr.metric] + 2*trop07.metrics.sd[, curr.metric])),
col = rgb(0, 0.8, 0, .3), border = NA)
polygon(c(trop08.metrics.mean$time/1000, rev(trop08.metrics.mean$time/1000)),
c(trop08.metrics.mean[, curr.metric] - 2*trop08.metrics.sd[, curr.metric],
rev(trop08.metrics.mean[, curr.metric] + 2*trop08.metrics.sd[, curr.metric])),
col = rgb(0, 0, 0.8, .3), border = NA)
points(trop06.metrics.mean$time/1000, trop06.metrics.mean[, curr.metric], type = 'l', col = 'red', lwd = 3)
points(trop07.metrics.mean$time/1000, trop07.metrics.mean[, curr.metric], type = 'l', col = 'green', lwd = 3)
points(trop08.metrics.mean$time/1000, trop08.metrics.mean[, curr.metric], type = 'l', col = 'blue', lwd = 3)
if(curr.metric == 'gamma.stat') { abline(h = 0, lty = 'dashed')}
}
mtext("Time (x1000)", 1, outer=T, cex = 1.75, line = 2)
dev.off()
pdf(paste(analysis_dir,'/metrics_thru_time_varying_specn_trop_origin',Sys.Date(),'.pdf',sep=""), height = 6, width = 8)
par(mfrow = c(2, 2), mar = c(3, 6, 1, 1), oma = c(5, 0, 0, 0), cex.lab = 2, las = 1, cex.axis = 1.3, mgp = c(4,1,0))
y.labels = c('Global richness', expression(italic(r)[latitude-richness]), expression(gamma), expression(italic(r)[MRD-richness]))
metric.names = c('global.richness','r.lat.rich', 'gamma.stat','r.MRD.rich')
for (j in 1:4) {
curr.metric = metric.names[j]
plot(trop06.metrics.mean$time/1000, trop06.metrics.mean[, curr.metric], xlim = c(0, max(trop06.metrics.mean$time/1000)),
ylim = range(c(trop06.metrics[, , curr.metric], trop08.metrics[, , curr.metric]), na.rm= T), type = "n",
ylab = y.labels[j], xlab = "")
polygon(c(trop06.metrics.mean$time/1000, rev(trop06.metrics.mean$time/1000)),
c(trop06.metrics.mean[, curr.metric] - 2*trop06.metrics.sd[, curr.metric],
rev(trop06.metrics.mean[, curr.metric] + 2*trop06.metrics.sd[, curr.metric])),
col = rgb(.8, 0, 0, .3), border = NA)
polygon(c(trop07.metrics.mean$time/1000, rev(trop07.metrics.mean$time/1000)),
c(trop07.metrics.mean[, curr.metric] - 2*trop07.metrics.sd[, curr.metric],
rev(trop07.metrics.mean[, curr.metric] + 2*trop07.metrics.sd[, curr.metric])),
col = rgb(0, 0.8, 0, .3), border = NA)
polygon(c(trop08.metrics.mean$time/1000, rev(trop08.metrics.mean$time/1000)),
c(trop08.metrics.mean[, curr.metric] - 2*trop08.metrics.sd[, curr.metric],
rev(trop08.metrics.mean[, curr.metric] + 2*trop08.metrics.sd[, curr.metric])),
col = rgb(0, 0, 0.8, .3), border = NA)
points(trop06.metrics.mean$time/1000, trop06.metrics.mean[, curr.metric], type = 'l', col = 'red', lwd = 3)
points(trop07.metrics.mean$time/1000, trop07.metrics.mean[, curr.metric], type = 'l', col = 'green', lwd = 3)
points(trop08.metrics.mean$time/1000, trop08.metrics.mean[, curr.metric], type = 'l', col = 'blue', lwd = 3)
if(curr.metric == 'gamma.stat') { abline(h = 0, lty = 'dashed')}
}
mtext("Time (x1000)", 1, outer=T, cex = 1.75, line = 2)
dev.off()
head(trop06.metrics.mean)
dim(trop06.metrics)
class(trop06.metrics)
head(trop06.metrics)
head(trop06.metrics[,,1])
dim(trop07.metrics)
trop06.metrics2 = trop06.metrics[,,-1]
dim(trop06.metrics2)
head(trop06.metrics[,,1])
head(trop06.metrics2[,,1])
metric.abind = function(sims) {
metrics = matrix(NA, nrow = 100, ncol = 28)
for (i in sims) {
temp = read.csv(paste(sim_dir,"/SENC_Stats_sim",i,"_mult_times.csv",sep=""),header=T)
temp$r.lat.rich = -temp$r.env.rich
# There is no output for timesteps in which no correlations could be calculated
# so we add the relevant number of rows of data with NA's in that case
if (min(temp$time) > 1000) {
temp.top = data.frame(matrix(NA, nrow = (min(temp$time)/1000)-1, ncol = 28))
temp.top[,3] = (1:(min(temp$time)/1000-1))*1000
names(temp.top) = names(temp)
temp = rbind(temp.top, temp)
}
metrics = abind(metrics, temp, along = 3)
}
return(metrics[,,-1]) #don't include the first slice of NAs
}
trop06.metrics = metric.abind(trop.sims.06)
trop07.metrics = metric.abind(trop.sims.07)
trop08.metrics = metric.abind(trop.sims.08)
trop06.metrics.mean = data.frame(apply(trop06.metrics, 2:3, mean))
dim(trop06.metrics.mean)
trop06.metrics.mean = data.frame(apply(trop06.metrics, 1:2, mean))
dim(trop06.metrics.mean)
trop06.metrics.mean = data.frame(apply(trop06.metrics, 1:2, mean))
trop06.metrics.sd = data.frame(apply(trop06.metrics, 1:2, function(x) var(x)^.5))
trop07.metrics.mean = data.frame(apply(trop07.metrics, 1:2, mean))
trop07.metrics.sd = data.frame(apply(trop07.metrics, 1:2, function(x) var(x)^.5))
trop08.metrics.mean = data.frame(apply(trop08.metrics, 1:2, mean))
trop08.metrics.sd = data.frame(apply(trop08.metrics, 1:2, function(x) var(x)^.5))
pdf(paste(analysis_dir,'/metrics_thru_time_varying_specn_trop_origin',Sys.Date(),'.pdf',sep=""), height = 6, width = 8)
par(mfrow = c(2, 2), mar = c(3, 6, 1, 1), oma = c(5, 0, 0, 0), cex.lab = 2, las = 1, cex.axis = 1.3, mgp = c(4,1,0))
y.labels = c('Global richness', expression(italic(r)[latitude-richness]), expression(gamma), expression(italic(r)[MRD-richness]))
metric.names = c('global.richness','r.lat.rich', 'gamma.stat','r.MRD.rich')
for (j in 1:4) {
curr.metric = metric.names[j]
plot(trop06.metrics.mean$time/1000, trop06.metrics.mean[, curr.metric], xlim = c(0, max(trop06.metrics.mean$time/1000)),
ylim = range(c(trop06.metrics[, , curr.metric], trop08.metrics[, , curr.metric]), na.rm= T), type = "n",
ylab = y.labels[j], xlab = "")
polygon(c(trop06.metrics.mean$time/1000, rev(trop06.metrics.mean$time/1000)),
c(trop06.metrics.mean[, curr.metric] - 2*trop06.metrics.sd[, curr.metric],
rev(trop06.metrics.mean[, curr.metric] + 2*trop06.metrics.sd[, curr.metric])),
col = rgb(.8, 0, 0, .3), border = NA)
polygon(c(trop07.metrics.mean$time/1000, rev(trop07.metrics.mean$time/1000)),
c(trop07.metrics.mean[, curr.metric] - 2*trop07.metrics.sd[, curr.metric],
rev(trop07.metrics.mean[, curr.metric] + 2*trop07.metrics.sd[, curr.metric])),
col = rgb(0, 0.8, 0, .3), border = NA)
polygon(c(trop08.metrics.mean$time/1000, rev(trop08.metrics.mean$time/1000)),
c(trop08.metrics.mean[, curr.metric] - 2*trop08.metrics.sd[, curr.metric],
rev(trop08.metrics.mean[, curr.metric] + 2*trop08.metrics.sd[, curr.metric])),
col = rgb(0, 0, 0.8, .3), border = NA)
points(trop06.metrics.mean$time/1000, trop06.metrics.mean[, curr.metric], type = 'l', col = 'red', lwd = 3)
points(trop07.metrics.mean$time/1000, trop07.metrics.mean[, curr.metric], type = 'l', col = 'green', lwd = 3)
points(trop08.metrics.mean$time/1000, trop08.metrics.mean[, curr.metric], type = 'l', col = 'blue', lwd = 3)
if(curr.metric == 'gamma.stat') { abline(h = 0, lty = 'dashed')}
}
mtext("Time (x1000)", 1, outer=T, cex = 1.75, line = 2)
dev.off()
trop06.metrics.mean[,,1]
dim(trop06.metrics.mean)
trop06.metrics.mean[,'global.richness'
]
pdf(paste(analysis_dir,'/metrics_thru_time_varying_specn_trop_origin',Sys.Date(),'.pdf',sep=""), height = 6, width = 8)
par(mfrow = c(2, 2), mar = c(3, 6, 1, 1), oma = c(5, 0, 0, 0), cex.lab = 2, las = 1, cex.axis = 1.3, mgp = c(4,1,0))
y.labels = c('Global richness', expression(italic(r)[latitude-richness]), expression(gamma), expression(italic(r)[MRD-richness]))
metric.names = c('global.richness','r.lat.rich', 'gamma.stat','r.MRD.rich')
for (j in 1:4) {
curr.metric = metric.names[j]
plot(trop06.metrics.mean$time/1000, trop06.metrics.mean[, curr.metric], xlim = c(0, max(trop06.metrics.mean$time/1000)),
ylim = range(c(trop06.metrics[, curr.metric, ], trop08.metrics[, curr.metric, ]), na.rm= T), type = "n",
ylab = y.labels[j], xlab = "")
polygon(c(trop06.metrics.mean$time/1000, rev(trop06.metrics.mean$time/1000)),
c(trop06.metrics.mean[, curr.metric] - 2*trop06.metrics.sd[, curr.metric],
rev(trop06.metrics.mean[, curr.metric] + 2*trop06.metrics.sd[, curr.metric])),
col = rgb(.8, 0, 0, .3), border = NA)
polygon(c(trop07.metrics.mean$time/1000, rev(trop07.metrics.mean$time/1000)),
c(trop07.metrics.mean[, curr.metric] - 2*trop07.metrics.sd[, curr.metric],
rev(trop07.metrics.mean[, curr.metric] + 2*trop07.metrics.sd[, curr.metric])),
col = rgb(0, 0.8, 0, .3), border = NA)
polygon(c(trop08.metrics.mean$time/1000, rev(trop08.metrics.mean$time/1000)),
c(trop08.metrics.mean[, curr.metric] - 2*trop08.metrics.sd[, curr.metric],
rev(trop08.metrics.mean[, curr.metric] + 2*trop08.metrics.sd[, curr.metric])),
col = rgb(0, 0, 0.8, .3), border = NA)
points(trop06.metrics.mean$time/1000, trop06.metrics.mean[, curr.metric], type = 'l', col = 'red', lwd = 3)
points(trop07.metrics.mean$time/1000, trop07.metrics.mean[, curr.metric], type = 'l', col = 'green', lwd = 3)
points(trop08.metrics.mean$time/1000, trop08.metrics.mean[, curr.metric], type = 'l', col = 'blue', lwd = 3)
if(curr.metric == 'gamma.stat') { abline(h = 0, lty = 'dashed')}
}
mtext("Time (x1000)", 1, outer=T, cex = 1.75, line = 2)
dev.off()
temp06.metrics = metric.abind(temp.sims.06)
temp07.metrics = metric.abind(temp.sims.07)
temp08.metrics = metric.abind(temp.sims.08)
trop06.metrics.mean = data.frame(apply(trop06.metrics, 1:2, mean))
trop06.metrics.sd = data.frame(apply(trop06.metrics, 1:2, function(x) var(x)^.5))
trop07.metrics.mean = data.frame(apply(trop07.metrics, 1:2, mean))
trop07.metrics.sd = data.frame(apply(trop07.metrics, 1:2, function(x) var(x)^.5))
trop08.metrics.mean = data.frame(apply(trop08.metrics, 1:2, mean))
trop08.metrics.sd = data.frame(apply(trop08.metrics, 1:2, function(x) var(x)^.5))
temp06.metrics.mean = data.frame(apply(temp06.metrics, 1:2, mean))
temp06.metrics.sd = data.frame(apply(temp06.metrics, 1:2, function(x) var(x)^.5))
temp07.metrics.mean = data.frame(apply(temp07.metrics, 1:2, mean))
temp07.metrics.sd = data.frame(apply(temp07.metrics, 1:2, function(x) var(x)^.5))
temp08.metrics.mean = data.frame(apply(temp08.metrics, 1:2, mean))
temp08.metrics.sd = data.frame(apply(temp08.metrics, 1:2, function(x) var(x)^.5))
pdf(paste(analysis_dir,'/metrics_thru_time_varying_specn_',Sys.Date(),'.pdf',sep=""), height = 6, width = 8)
par(mfrow = c(2, 2), mar = c(3, 6, 1, 1), oma = c(4, 0, 3, 0), cex.lab = 2, las = 1, cex.axis = 1.3, mgp = c(4,1,0))
y.labels = c('Global richness', expression(italic(r)[latitude-richness]), expression(gamma), expression(italic(r)[MRD-richness]))
metric.names = c('global.richness','r.lat.rich', 'gamma.stat','r.MRD.rich')
for (j in 1:4) {
curr.metric = metric.names[j]
plot(trop06.metrics.mean$time/1000, trop06.metrics.mean[, curr.metric], xlim = c(0, max(trop06.metrics.mean$time/1000)),
ylim = range(c(trop06.metrics[, curr.metric, ], trop08.metrics[, curr.metric, ]), na.rm= T), type = "n",
ylab = y.labels[j], xlab = "")
polygon(c(trop06.metrics.mean$time/1000, rev(trop06.metrics.mean$time/1000)),
c(trop06.metrics.mean[, curr.metric] - 2*trop06.metrics.sd[, curr.metric],
rev(trop06.metrics.mean[, curr.metric] + 2*trop06.metrics.sd[, curr.metric])),
col = rgb(.8, 0, 0, .3), border = NA)
polygon(c(trop07.metrics.mean$time/1000, rev(trop07.metrics.mean$time/1000)),
c(trop07.metrics.mean[, curr.metric] - 2*trop07.metrics.sd[, curr.metric],
rev(trop07.metrics.mean[, curr.metric] + 2*trop07.metrics.sd[, curr.metric])),
col = rgb(0, 0.8, 0, .3), border = NA)
polygon(c(trop08.metrics.mean$time/1000, rev(trop08.metrics.mean$time/1000)),
c(trop08.metrics.mean[, curr.metric] - 2*trop08.metrics.sd[, curr.metric],
rev(trop08.metrics.mean[, curr.metric] + 2*trop08.metrics.sd[, curr.metric])),
col = rgb(0, 0, 0.8, .3), border = NA)
points(trop06.metrics.mean$time/1000, trop06.metrics.mean[, curr.metric], type = 'l', col = 'red', lwd = 3)
points(trop07.metrics.mean$time/1000, trop07.metrics.mean[, curr.metric], type = 'l', col = 'green', lwd = 3)
points(trop08.metrics.mean$time/1000, trop08.metrics.mean[, curr.metric], type = 'l', col = 'blue', lwd = 3)
if(curr.metric == 'gamma.stat') { abline(h = 0, lty = 'dashed')}
}
mtext("Time (x1000)", 1, outer=T, cex = 1.75, line = 2)
mtext("Tropical origin", 3, outer = T, cex = 1.5, line = 2)
# Temperate origin
for (j in 1:4) {
curr.metric = metric.names[j]
plot(temp06.metrics.mean$time/1000, temp06.metrics.mean[, curr.metric], xlim = c(0, max(temp06.metrics.mean$time/1000)),
ylim = range(c(temp06.metrics[, curr.metric, ], temp08.metrics[, curr.metric, ]), na.rm= T), type = "n",
ylab = y.labels[j], xlab = "")
polygon(c(temp06.metrics.mean$time/1000, rev(temp06.metrics.mean$time/1000)),
c(temp06.metrics.mean[, curr.metric] - 2*temp06.metrics.sd[, curr.metric],
rev(temp06.metrics.mean[, curr.metric] + 2*temp06.metrics.sd[, curr.metric])),
col = rgb(.8, 0, 0, .3), border = NA)
polygon(c(temp07.metrics.mean$time/1000, rev(temp07.metrics.mean$time/1000)),
c(temp07.metrics.mean[, curr.metric] - 2*temp07.metrics.sd[, curr.metric],
rev(temp07.metrics.mean[, curr.metric] + 2*temp07.metrics.sd[, curr.metric])),
col = rgb(0, 0.8, 0, .3), border = NA)
polygon(c(temp08.metrics.mean$time/1000, rev(temp08.metrics.mean$time/1000)),
c(temp08.metrics.mean[, curr.metric] - 2*temp08.metrics.sd[, curr.metric],
rev(temp08.metrics.mean[, curr.metric] + 2*temp08.metrics.sd[, curr.metric])),
col = rgb(0, 0, 0.8, .3), border = NA)
points(temp06.metrics.mean$time/1000, temp06.metrics.mean[, curr.metric], type = 'l', col = 'red', lwd = 3)
points(temp07.metrics.mean$time/1000, temp07.metrics.mean[, curr.metric], type = 'l', col = 'green', lwd = 3)
points(temp08.metrics.mean$time/1000, temp08.metrics.mean[, curr.metric], type = 'l', col = 'blue', lwd = 3)
if(curr.metric == 'gamma.stat') { abline(h = 0, lty = 'dashed')}
}
mtext("Time (x1000)", 1, outer=T, cex = 1.75, line = 2)
mtext("Temperate origin", 3, outer = T, cex = 1.5, line = 2)
dev.off()
pdf(paste(analysis_dir,'/metrics_thru_time_varying_specn_',Sys.Date(),'.pdf',sep=""), height = 6, width = 8)
par(mfrow = c(2, 2), mar = c(3, 6, 1, 1), oma = c(4, 0, 3, 0), cex.lab = 2, las = 1, cex.axis = 1.3, mgp = c(4,1,0))
y.labels = c('Global richness', expression(italic(r)[latitude-richness]), expression(gamma), expression(italic(r)[MRD-richness]))
metric.names = c('global.richness','r.lat.rich', 'gamma.stat','r.MRD.rich')
for (j in 1:4) {
curr.metric = metric.names[j]
plot(trop06.metrics.mean$time/1000, trop06.metrics.mean[, curr.metric], xlim = c(0, max(trop06.metrics.mean$time/1000)),
ylim = range(c(trop06.metrics[, curr.metric, ], trop08.metrics[, curr.metric, ]), na.rm= T), type = "n",
ylab = y.labels[j], xlab = "")
polygon(c(trop06.metrics.mean$time/1000, rev(trop06.metrics.mean$time/1000)),
c(trop06.metrics.mean[, curr.metric] - 2*trop06.metrics.sd[, curr.metric],
rev(trop06.metrics.mean[, curr.metric] + 2*trop06.metrics.sd[, curr.metric])),
col = rgb(.8, 0, 0, .3), border = NA)
polygon(c(trop07.metrics.mean$time/1000, rev(trop07.metrics.mean$time/1000)),
c(trop07.metrics.mean[, curr.metric] - 2*trop07.metrics.sd[, curr.metric],
rev(trop07.metrics.mean[, curr.metric] + 2*trop07.metrics.sd[, curr.metric])),
col = rgb(0, 0.8, 0, .3), border = NA)
polygon(c(trop08.metrics.mean$time/1000, rev(trop08.metrics.mean$time/1000)),
c(trop08.metrics.mean[, curr.metric] - 2*trop08.metrics.sd[, curr.metric],
rev(trop08.metrics.mean[, curr.metric] + 2*trop08.metrics.sd[, curr.metric])),
col = rgb(0, 0, 0.8, .3), border = NA)
points(trop06.metrics.mean$time/1000, trop06.metrics.mean[, curr.metric], type = 'l', col = 'red', lwd = 3)
points(trop07.metrics.mean$time/1000, trop07.metrics.mean[, curr.metric], type = 'l', col = 'green', lwd = 3)
points(trop08.metrics.mean$time/1000, trop08.metrics.mean[, curr.metric], type = 'l', col = 'blue', lwd = 3)
if(curr.metric == 'gamma.stat') { abline(h = 0, lty = 'dashed')}
}
mtext("Time (x1000)", 1, outer=T, cex = 1.75, line = 2)
mtext("Tropical origin", 3, outer = T, cex = 1.5, line = 1)
# Temperate origin
for (j in 1:4) {
curr.metric = metric.names[j]
plot(temp06.metrics.mean$time/1000, temp06.metrics.mean[, curr.metric], xlim = c(0, max(temp06.metrics.mean$time/1000)),
ylim = range(c(temp06.metrics[, curr.metric, ], temp08.metrics[, curr.metric, ]), na.rm= T), type = "n",
ylab = y.labels[j], xlab = "")
polygon(c(temp06.metrics.mean$time/1000, rev(temp06.metrics.mean$time/1000)),
c(temp06.metrics.mean[, curr.metric] - 2*temp06.metrics.sd[, curr.metric],
rev(temp06.metrics.mean[, curr.metric] + 2*temp06.metrics.sd[, curr.metric])),
col = rgb(.8, 0, 0, .3), border = NA)
polygon(c(temp07.metrics.mean$time/1000, rev(temp07.metrics.mean$time/1000)),
c(temp07.metrics.mean[, curr.metric] - 2*temp07.metrics.sd[, curr.metric],
rev(temp07.metrics.mean[, curr.metric] + 2*temp07.metrics.sd[, curr.metric])),
col = rgb(0, 0.8, 0, .3), border = NA)
polygon(c(temp08.metrics.mean$time/1000, rev(temp08.metrics.mean$time/1000)),
c(temp08.metrics.mean[, curr.metric] - 2*temp08.metrics.sd[, curr.metric],
rev(temp08.metrics.mean[, curr.metric] + 2*temp08.metrics.sd[, curr.metric])),
col = rgb(0, 0, 0.8, .3), border = NA)
points(temp06.metrics.mean$time/1000, temp06.metrics.mean[, curr.metric], type = 'l', col = 'red', lwd = 3)
points(temp07.metrics.mean$time/1000, temp07.metrics.mean[, curr.metric], type = 'l', col = 'green', lwd = 3)
points(temp08.metrics.mean$time/1000, temp08.metrics.mean[, curr.metric], type = 'l', col = 'blue', lwd = 3)
if(curr.metric == 'gamma.stat') { abline(h = 0, lty = 'dashed')}
}
mtext("Time (x1000)", 1, outer=T, cex = 1.75, line = 2)
mtext("Temperate origin", 3, outer = T, cex = 1.5, line = 1)
dev.off()
trop.sims = c(4065:4072,4074)
Ktrop.all = c()
for (i in trop.sims) {
temp = read.csv(paste(sim_dir,'/SENC_Stats_sim', i, 'specific_times.csv',sep=''), header=T)
Ktrop.all = rbind(Ktrop.all, temp)
}
Ktrop.all = c()
for (i in trop.sims) {
temp = read.csv(paste(sim_dir,'/SENC_Stats_sim', i, '_specific_times.csv',sep=''), header=T)
Ktrop.all = rbind(Ktrop.all, temp)
}
Ktemp.all = c()
for (i in temp.sims) {
tmp = read.csv(paste(sim_dir,'/SENC_Stats_sim', i, '_specific_times.csv',sep=''), header=T)
Ktemp.all = rbind(Ktemp.all, tmp)
}
dim(Ktrop.all)
Ktrop = subset(Ktrop.all, clade.richness >= 30 & n.regions >=5)
Ktemp = subset(Ktemp.all, clade.richness >= 30 & n.regions >=5)
unique(Ktrop$time)
pdf(paste(analysis_dir,'/summaryplots/latcorr_subclades_vs_cladeAgeRich_thruTime_',Sys.Date(),'_log.pdf',sep=''), height=10, width = 25)
par(mfcol=c(2,4), mar = c(7, 8, 3, 4), oma=c(1, 1, 1, 4), mgp = c(5.5, 1.5, 0))
cexpts = 2
cexpts.seb = 3
cexaxis = 2
cexlab = 2.75
cexleg = 2
cexabc = 2.5
pch.temp = 18
linewd = 7
arrowwd = 4
for (t in c(15000, 30000, 60000, 100000)) {
Ktrop.sub = subset(Ktrop, time == t)
Ktemp.sub = subset(Ktemp, time == t)
#Vs clade origin time (negative the r.env.rich is equal to the richness-latitude correlation)
# plotting complement of x-axis (hence, difference from max value)
plot(max(log10(Ktrop.sub$clade.origin.time)) - log10(Ktrop.sub$clade.origin.time), -Ktrop.sub$r.env.rich, xaxt = "n",
xlab = expression(paste(plain(log)[10]," Clade origin time")), pch=16, col='red',ylim=c(-1,1),
ylab = "", cex = cexpts, main = '', cex.lab = cexlab, cex.axis = cexaxis, las=1)
points(max(log10(Ktrop.sub$clade.origin.time)) - log10(Ktemp.sub$clade.origin.time), -Ktemp.sub$r.env.rich,
col = 'blue', pch = pch.temp, cex = cexpts)
axis(1, at = 0:4, labels = 4:0, cex.axis = cexaxis)
mtext(c("recent","old"), 1, at = c(0,4), line = 3, cex = 1.5)
mtext(expression(italic(r)[latitude-richness]), 2, cex = cexlab, line = 5)
abline(h = 0, lty = 'dashed')
legend('topright',c('temperate origin','tropical origin'), pch = c(pch.temp, 16), col = c('blue','red'), cex = cexleg)
#Vs clade richness
plot(log10(Ktrop.sub$clade.richness), -Ktrop.sub$r.env.rich, pch = 16, col = 'red', ylim = c(-1.15,1),
xlab = expression(paste(plain(log)[10]," Clade richness")), ylab = "",
cex = cexpts, main = '', cex.lab = cexlab, cex.axis = cexaxis, las = 1)
points(log10(Ktemp.sub$clade.richness), -Ktemp.sub$r.env.rich, col = 'blue', pch = pch.temp, cex = cexpts)
abline(h = 0,lty = 'dashed')
mtext(expression(italic(r)[latitude-richness]), 2, cex = cexlab, line = 5)
#extra tick marks showing % of max richness
pcts = c(.75,.25,.1)
axis(1,at=log10(pcts*max(Ktrop.sub$clade.richness)), labels=F,tck= .01)
text(log10(pcts*max(Ktrop.sub$clade.richness)), rep(-1.12,length(pcts)), paste(pcts*100,"%",sep=""), cex = 1.5)
}
dev.off()
pdf(paste(analysis_dir,'/summaryplots/latcorr_subclades_vs_cladeAgeRich_thruTime_',Sys.Date(),'_log.pdf',sep=''), height=10, width = 25)
par(mfcol=c(2,4), mar = c(7, 8, 3, 4), oma=c(1, 1, 1, 4), mgp = c(5.5, 1.5, 0))
cexpts = 2
cexpts.seb = 3
cexaxis = 2
cexlab = 2.75
cexleg = 2
cexabc = 2.5
pch.temp = 18
linewd = 7
arrowwd = 4
for (t in c(15000, 30000, 60000, 100000)) {
Ktrop.sub = subset(Ktrop, time == t)
Ktemp.sub = subset(Ktemp, time == t)
#Vs clade origin time (negative the r.env.rich is equal to the richness-latitude correlation)
# plotting complement of x-axis (hence, difference from max value)
plot(max(log10(Ktrop.sub$clade.origin.time)) - log10(Ktrop.sub$clade.origin.time), -Ktrop.sub$r.env.rich, xaxt = "n",
xlab = expression(paste(plain(log)[10]," Clade origin time")), pch=16, col='red',ylim=c(-1,1),
ylab = "", cex = cexpts, main = paste(t/1000,'k timesteps'), cex.lab = cexlab, cex.axis = cexaxis, las=1)
points(max(log10(Ktrop.sub$clade.origin.time)) - log10(Ktemp.sub$clade.origin.time), -Ktemp.sub$r.env.rich,
col = 'blue', pch = pch.temp, cex = cexpts)
axis(1, at = 0:4, labels = 4:0, cex.axis = cexaxis)
mtext(c("recent","old"), 1, at = c(0,4), line = 3, cex = 1.5)
mtext(expression(italic(r)[latitude-richness]), 2, cex = cexlab, line = 5)
abline(h = 0, lty = 'dashed')
legend('topright',c('temperate origin','tropical origin'), pch = c(pch.temp, 16), col = c('blue','red'), cex = cexleg)
#Vs clade richness
plot(log10(Ktrop.sub$clade.richness), -Ktrop.sub$r.env.rich, pch = 16, col = 'red', ylim = c(-1.15,1),
xlab = expression(paste(plain(log)[10]," Clade richness")), ylab = "",
cex = cexpts, main = '', cex.lab = cexlab, cex.axis = cexaxis, las = 1)
points(log10(Ktemp.sub$clade.richness), -Ktemp.sub$r.env.rich, col = 'blue', pch = pch.temp, cex = cexpts)
abline(h = 0,lty = 'dashed')
mtext(expression(italic(r)[latitude-richness]), 2, cex = cexlab, line = 5)
#extra tick marks showing % of max richness
pcts = c(.75,.25,.1)
axis(1,at=log10(pcts*max(Ktrop.sub$clade.richness)), labels=F,tck= .01)
text(log10(pcts*max(Ktrop.sub$clade.richness)), rep(-1.12,length(pcts)), paste(pcts*100,"%",sep=""), cex = 1.5)
}
dev.off()
times = c(5000, 10000, 15000, 30000, 60000, 100000)
#Plot
pdf(paste(analysis_dir,'/summaryplots/latcorr_subclades_vs_cladeAgeRich_thruTime_',Sys.Date(),'_log.pdf',sep=''), height=10, width = 25)
par(mfcol=c(2,length(times)), mar = c(7, 8, 3, 4), oma=c(1, 1, 1, 4), mgp = c(5.5, 1.5, 0))
cexpts = 2
cexpts.seb = 3
cexaxis = 2
cexlab = 2.75
cexleg = 2
cexabc = 2.5
pch.temp = 18
linewd = 7
arrowwd = 4
for (t in times) {
Ktrop.sub = subset(Ktrop, time == t)
Ktemp.sub = subset(Ktemp, time == t)
#Vs clade origin time (negative the r.env.rich is equal to the richness-latitude correlation)
# plotting complement of x-axis (hence, difference from max value)
plot(max(log10(Ktrop.sub$clade.origin.time)) - log10(Ktrop.sub$clade.origin.time), -Ktrop.sub$r.env.rich, xaxt = "n",
xlab = expression(paste(plain(log)[10]," Clade origin time")), pch=16, col='red',ylim=c(-1,1),
ylab = "", cex = cexpts, main = paste(t/1000,'k timesteps'), cex.lab = cexlab, cex.axis = cexaxis, las=1, cex.main = 2)
points(max(log10(Ktrop.sub$clade.origin.time)) - log10(Ktemp.sub$clade.origin.time), -Ktemp.sub$r.env.rich,
col = 'blue', pch = pch.temp, cex = cexpts)
axis(1, at = 0:4, labels = 4:0, cex.axis = cexaxis)
mtext(c("recent","old"), 1, at = c(0,4), line = 3, cex = 1.5)
mtext(expression(italic(r)[latitude-richness]), 2, cex = cexlab, line = 5)
abline(h = 0, lty = 'dashed')
legend('topright',c('temperate origin','tropical origin'), pch = c(pch.temp, 16), col = c('blue','red'), cex = cexleg)
#Vs clade richness
plot(log10(Ktrop.sub$clade.richness), -Ktrop.sub$r.env.rich, pch = 16, col = 'red', ylim = c(-1.15,1),
xlab = expression(paste(plain(log)[10]," Clade richness")), ylab = "",
cex = cexpts, main = '', cex.lab = cexlab, cex.axis = cexaxis, las = 1)
points(log10(Ktemp.sub$clade.richness), -Ktemp.sub$r.env.rich, col = 'blue', pch = pch.temp, cex = cexpts)
abline(h = 0,lty = 'dashed')
mtext(expression(italic(r)[latitude-richness]), 2, cex = cexlab, line = 5)
#extra tick marks showing % of max richness
pcts = c(.75,.25,.1)
axis(1,at=log10(pcts*max(Ktrop.sub$clade.richness)), labels=F,tck= .01)
text(log10(pcts*max(Ktrop.sub$clade.richness)), rep(-1.12,length(pcts)), paste(pcts*100,"%",sep=""), cex = 1.5)
}
dev.off()
trop.sims = 4065:4074
temp.sims = 4075:4084
sim.matrix = read.csv("SENC_Master_Simulation_Matrix.csv",header=T);
trop.metrics = array(-999,c(length(trop.sims),100,28));
temp.metrics = array(-999,c(length(temp.sims),100,28));
for (i in 1:length(trop.sims)) {
sim1 = trop.sims[i];
temp1 = read.csv(paste(sim_dir,"/SENC_Stats_sim",sim1,"_mult_times.csv",sep=""),header=T)
temp1$r.lat.rich = -temp1$r.env.rich;
trop.metrics[i,,] = as.matrix(temp1);
trop.metrics = array(trop.metrics, dim = dim(trop.metrics), dimnames = list(NULL, NULL, colnames(temp1)));
rm('temp1');
}
for ( j in 1:length(temp.sims)) {
sim2 = temp.sims[j]
temp2 = read.csv(paste(sim_dir,"/SENC_Stats_sim",sim2,"_mult_times.csv",sep=""),header=T);
temp2$r.lat.rich = -temp2$r.env.rich;
temp.metrics[j,,] = as.matrix(temp2);
temp.metrics = array(temp.metrics, dim = dim(temp.metrics), dimnames = list(NULL, NULL, colnames(temp2)));
rm('temp2')
}
temp.metrics.mean = data.frame(apply(temp.metrics, 2:3, mean))
temp.metrics.sd = data.frame(apply(temp.metrics, 2:3, function(x) var(x)^.5))
trop.metrics.mean = data.frame(apply(trop.metrics, 2:3, mean))
trop.metrics.sd = data.frame(apply(trop.metrics, 2:3, function(x) var(x)^.5))
# Plot 4 metrics over the course of the simulation: global richness, the latitude-richness correlation,
# gamma, and the MRD-richness correlation. Means +/- 2 SD are shown.
pdf(paste(analysis_dir,'/metrics_thru_time_',Sys.Date(),'.pdf',sep=""), height = 6, width = 8)
par(mfrow = c(2, 2), mar = c(3, 6, 1, 1), oma = c(5, 0, 0, 0), cex.lab = 2, las = 1, cex.axis = 1.3, mgp = c(4,1,0))
y.labels = c('Global richness', expression(italic(r)[latitude-richness]), expression(gamma), expression(italic(r)[MRD-richness]))
metric.names = c('global.richness','r.lat.rich', 'gamma.stat','r.MRD.rich')
for (j in 1:4) {
curr.metric = metric.names[j]
plot(trop.metrics.mean$time/1000, trop.metrics.mean[, curr.metric], xlim = c(0, max(trop.metrics.mean$time/1000)),
ylim = range(c(trop.metrics[, , curr.metric], temp.metrics[, , curr.metric]), na.rm= T), type = "n",
ylab = y.labels[j], xlab = "")
polygon(c(trop.metrics.mean$time/1000, rev(trop.metrics.mean$time/1000)),
c(trop.metrics.mean[, curr.metric] - 2*trop.metrics.sd[, curr.metric],
rev(trop.metrics.mean[, curr.metric] + 2*trop.metrics.sd[, curr.metric])),
col = rgb(.8, 0, 0, .3), border = NA)
polygon(c(temp.metrics.mean$time/1000, rev(temp.metrics.mean$time/1000)),
c(temp.metrics.mean[, curr.metric] - 2*temp.metrics.sd[, curr.metric],
rev(temp.metrics.mean[, curr.metric] + 2*temp.metrics.sd[, curr.metric])),
col = rgb(0, 0, .8, .3), border = NA)
points(trop.metrics.mean$time/1000, trop.metrics.mean[, curr.metric], type = 'l', col = 'red', lwd = 3)
points(temp.metrics.mean$time/1000, temp.metrics.mean[, curr.metric], type = 'l', col = 'blue', lwd = 3)
if(curr.metric == 'gamma.stat') { abline(h = 0, lty = 'dashed')}
}
mtext("Time (x1000)", 1, outer=T, cex = 1.75, line = 2)
dev.off()
pdf(paste(analysis_dir,'/metrics_thru_time_',Sys.Date(),'.pdf',sep=""), height = 6, width = 8)
par(mfrow = c(2, 2), mar = c(3, 6, 1, 1), oma = c(3, 0, 0, 0), cex.lab = 2, las = 1, cex.axis = 1.3, mgp = c(4,1,0))
y.labels = c('Global richness', expression(italic(r)[latitude-richness]), expression(gamma), expression(italic(r)[MRD-richness]))
metric.names = c('global.richness','r.lat.rich', 'gamma.stat','r.MRD.rich')
for (j in 1:4) {
curr.metric = metric.names[j]
plot(trop.metrics.mean$time/1000, trop.metrics.mean[, curr.metric], xlim = c(0, max(trop.metrics.mean$time/1000)),
ylim = range(c(trop.metrics[, , curr.metric], temp.metrics[, , curr.metric]), na.rm= T), type = "n",
ylab = y.labels[j], xlab = "")
polygon(c(trop.metrics.mean$time/1000, rev(trop.metrics.mean$time/1000)),
c(trop.metrics.mean[, curr.metric] - 2*trop.metrics.sd[, curr.metric],
rev(trop.metrics.mean[, curr.metric] + 2*trop.metrics.sd[, curr.metric])),
col = rgb(.8, 0, 0, .3), border = NA)
polygon(c(temp.metrics.mean$time/1000, rev(temp.metrics.mean$time/1000)),
c(temp.metrics.mean[, curr.metric] - 2*temp.metrics.sd[, curr.metric],
rev(temp.metrics.mean[, curr.metric] + 2*temp.metrics.sd[, curr.metric])),
col = rgb(0, 0, .8, .3), border = NA)
points(trop.metrics.mean$time/1000, trop.metrics.mean[, curr.metric], type = 'l', col = 'red', lwd = 3)
points(temp.metrics.mean$time/1000, temp.metrics.mean[, curr.metric], type = 'l', col = 'blue', lwd = 3)
if(curr.metric == 'gamma.stat') { abline(h = 0, lty = 'dashed')}
}
mtext("Time (x1000)", 1, outer=T, cex = 1.75, line = 1.5)
dev.off()
delta = 0:10
f = exp(-.5*delta)
plot(delta,f)
